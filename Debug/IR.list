
IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004520  08004520  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004520  08004520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08004598  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004598  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c20b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002322  00000000  00000000  0002c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f15  00000000  00000000  0002ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb1f  00000000  00000000  00048e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc66  00000000  00000000  00057994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e35fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  000e364c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004438 	.word	0x08004438

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004438 	.word	0x08004438

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2010      	movs	r0, #16
 8000170:	f000 fde7 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f000 fe00 	bl	8000d7a <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800019c:	4b33      	ldr	r3, [pc, #204]	; (800026c <MX_GPIO_Init+0xe4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a32      	ldr	r2, [pc, #200]	; (800026c <MX_GPIO_Init+0xe4>)
 80001a2:	f043 0310 	orr.w	r3, r3, #16
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b30      	ldr	r3, [pc, #192]	; (800026c <MX_GPIO_Init+0xe4>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0310 	and.w	r3, r3, #16
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b4:	4b2d      	ldr	r3, [pc, #180]	; (800026c <MX_GPIO_Init+0xe4>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a2c      	ldr	r2, [pc, #176]	; (800026c <MX_GPIO_Init+0xe4>)
 80001ba:	f043 0320 	orr.w	r3, r3, #32
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b2a      	ldr	r3, [pc, #168]	; (800026c <MX_GPIO_Init+0xe4>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0320 	and.w	r3, r3, #32
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001cc:	4b27      	ldr	r3, [pc, #156]	; (800026c <MX_GPIO_Init+0xe4>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a26      	ldr	r2, [pc, #152]	; (800026c <MX_GPIO_Init+0xe4>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b24      	ldr	r3, [pc, #144]	; (800026c <MX_GPIO_Init+0xe4>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0304 	and.w	r3, r3, #4
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e4:	4b21      	ldr	r3, [pc, #132]	; (800026c <MX_GPIO_Init+0xe4>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <MX_GPIO_Init+0xe4>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6193      	str	r3, [r2, #24]
 80001f0:	4b1e      	ldr	r3, [pc, #120]	; (800026c <MX_GPIO_Init+0xe4>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	f003 0308 	and.w	r3, r3, #8
 80001f8:	603b      	str	r3, [r7, #0]
 80001fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2120      	movs	r1, #32
 8000200:	481b      	ldr	r0, [pc, #108]	; (8000270 <MX_GPIO_Init+0xe8>)
 8000202:	f001 f8b9 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800020a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800020c:	4b19      	ldr	r3, [pc, #100]	; (8000274 <MX_GPIO_Init+0xec>)
 800020e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	4817      	ldr	r0, [pc, #92]	; (8000278 <MX_GPIO_Init+0xf0>)
 800021c:	f000 ff28 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000220:	2301      	movs	r3, #1
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	480f      	ldr	r0, [pc, #60]	; (8000270 <MX_GPIO_Init+0xe8>)
 8000234:	f000 ff1c 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000238:	2320      	movs	r3, #32
 800023a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023c:	2301      	movs	r3, #1
 800023e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	2302      	movs	r3, #2
 8000246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	4808      	ldr	r0, [pc, #32]	; (8000270 <MX_GPIO_Init+0xe8>)
 8000250:	f000 ff0e 	bl	8001070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000254:	2200      	movs	r2, #0
 8000256:	2100      	movs	r1, #0
 8000258:	2028      	movs	r0, #40	; 0x28
 800025a:	f000 fd72 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800025e:	2028      	movs	r0, #40	; 0x28
 8000260:	f000 fd8b 	bl	8000d7a <HAL_NVIC_EnableIRQ>

}
 8000264:	bf00      	nop
 8000266:	3720      	adds	r7, #32
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000
 8000270:	40010800 	.word	0x40010800
 8000274:	10110000 	.word	0x10110000
 8000278:	40011000 	.word	0x40011000

0800027c <ir_init>:
		break;
	}
}

void ir_init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim2);
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <ir_init+0x18>)
 8000282:	f001 fd1d 	bl	8001cc0 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000286:	2100      	movs	r1, #0
 8000288:	4802      	ldr	r0, [pc, #8]	; (8000294 <ir_init+0x18>)
 800028a:	f001 fe13 	bl	8001eb4 <HAL_TIM_IC_Start_IT>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000098 	.word	0x20000098

08000298 <ir_read>:

int ir_read(void)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <ir_read+0x30>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b20      	cmp	r3, #32
 80002a4:	d002      	beq.n	80002ac <ir_read+0x14>
		return -1;
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	e007      	b.n	80002bc <ir_read+0x24>

	uint8_t value = received_value >> 16;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <ir_read+0x34>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	0c1b      	lsrs	r3, r3, #16
 80002b2:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <ir_read+0x30>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
	return value;
 80002ba:	79fb      	ldrb	r3, [r7, #7]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090
 80002cc:	2000008c 	.word	0x2000008c

080002d0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d102      	bne.n	80002e4 <__io_putchar+0x14>
    __io_putchar('\r');
 80002de:	200d      	movs	r0, #13
 80002e0:	f7ff fff6 	bl	80002d0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80002e4:	1d39      	adds	r1, r7, #4
 80002e6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ea:	2201      	movs	r2, #1
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <__io_putchar+0x2c>)
 80002ee:	f002 ff72 	bl	80031d6 <HAL_UART_Transmit>

  return 1;
 80002f2:	2301      	movs	r3, #1
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000016c 	.word	0x2000016c

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
int main(void)
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f000 fbe0 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000310:	f000 f81a 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f7ff ff38 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 8000318:	f7ff ff18 	bl	800014c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800031c:	f000 fb4a 	bl	80009b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000320:	f000 f978 	bl	8000614 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000324:	f000 fa00 	bl	8000728 <MX_TIM3_Init>
        default:
          break;
      }
    }
  }
  ir_init();
 8000328:	f7ff ffa8 	bl	800027c <ir_init>

  while (1)
  {
    int value = ir_read();
 800032c:	f7ff ffb4 	bl	8000298 <ir_read>
 8000330:	6078      	str	r0, [r7, #4]
    if (value != -1) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000338:	d0f8      	beq.n	800032c <main+0x2c>
        printf("code = %02x\n", value);
 800033a:	6879      	ldr	r1, [r7, #4]
 800033c:	4801      	ldr	r0, [pc, #4]	; (8000344 <main+0x44>)
 800033e:	f003 f8e7 	bl	8003510 <iprintf>
  {
 8000342:	e7f3      	b.n	800032c <main+0x2c>
 8000344:	08004450 	.word	0x08004450

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	; 0x40
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f003 f8d2 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800036a:	2301      	movs	r3, #1
 800036c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800036e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000372:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000378:	2301      	movs	r3, #1
 800037a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	2302      	movs	r3, #2
 800037e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000386:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4618      	mov	r0, r3
 8000392:	f001 f82b 	bl	80013ec <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800039c:	f000 f819 	bl	80003d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	230f      	movs	r3, #15
 80003a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a4:	2302      	movs	r3, #2
 80003a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2102      	movs	r1, #2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa98 	bl	80018f0 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003c6:	f000 f804 	bl	80003d2 <Error_Handler>
  }
}
 80003ca:	bf00      	nop
 80003cc:	3740      	adds	r7, #64	; 0x40
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d6:	b672      	cpsid	i
}
 80003d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003da:	e7fe      	b.n	80003da <Error_Handler+0x8>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <NMI_Handler+0x4>

08000446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <HardFault_Handler+0x4>

0800044c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <MemManage_Handler+0x4>

08000452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <UsageFault_Handler+0x4>

0800045e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000486:	f000 fb69 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <DMA1_Channel6_IRQHandler+0x10>)
 8000496:	f000 fce5 	bl	8000e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000128 	.word	0x20000128

080004a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <TIM2_IRQHandler+0x10>)
 80004aa:	f001 fe09 	bl	80020c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000098 	.word	0x20000098

080004b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004c0:	f000 ff72 	bl	80013a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e00a      	b.n	80004f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004da:	f3af 8000 	nop.w
 80004de:	4601      	mov	r1, r0
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60ba      	str	r2, [r7, #8]
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbf0      	blt.n	80004da <_read+0x12>
	}

return len;
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e009      	b.n	8000528 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fed7 	bl	80002d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf1      	blt.n	8000514 <_write+0x12>
	}
	return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_close>:

int _close(int file)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
	return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000560:	605a      	str	r2, [r3, #4]
	return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <_isatty>:

int _isatty(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	return 1;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <_sbrk+0x5c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <_sbrk+0x60>)
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x64>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_sbrk+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d207      	bcs.n	80005dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005cc:	f002 ff6e 	bl	80034ac <__errno>
 80005d0:	4603      	mov	r3, r0
 80005d2:	220c      	movs	r2, #12
 80005d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e009      	b.n	80005f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <_sbrk+0x64>)
 80005ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20005000 	.word	0x20005000
 80005fc:	00000400 	.word	0x00000400
 8000600:	20000094 	.word	0x20000094
 8000604:	200001c8 	.word	0x200001c8

08000608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064e:	4b35      	ldr	r3, [pc, #212]	; (8000724 <MX_TIM2_Init+0x110>)
 8000650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <MX_TIM2_Init+0x110>)
 8000658:	2247      	movs	r2, #71	; 0x47
 800065a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MX_TIM2_Init+0x110>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <MX_TIM2_Init+0x110>)
 8000664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_TIM2_Init+0x110>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <MX_TIM2_Init+0x110>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000676:	482b      	ldr	r0, [pc, #172]	; (8000724 <MX_TIM2_Init+0x110>)
 8000678:	f001 fad2 	bl	8001c20 <HAL_TIM_Base_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000682:	f7ff fea6 	bl	80003d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000690:	4619      	mov	r1, r3
 8000692:	4824      	ldr	r0, [pc, #144]	; (8000724 <MX_TIM2_Init+0x110>)
 8000694:	f001 ff6e 	bl	8002574 <HAL_TIM_ConfigClockSource>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800069e:	f7ff fe98 	bl	80003d2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006a2:	4820      	ldr	r0, [pc, #128]	; (8000724 <MX_TIM2_Init+0x110>)
 80006a4:	f001 fbae 	bl	8001e04 <HAL_TIM_IC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80006ae:	f7ff fe90 	bl	80003d2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80006b2:	2304      	movs	r3, #4
 80006b4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80006b6:	2340      	movs	r3, #64	; 0x40
 80006b8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_TIM2_Init+0x110>)
 80006ca:	f002 f817 	bl	80026fc <HAL_TIM_SlaveConfigSynchro>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80006d4:	f7ff fe7d 	bl	80003d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <MX_TIM2_Init+0x110>)
 80006e8:	f002 fcb8 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80006f2:	f7ff fe6e 	bl	80003d2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006f6:	2302      	movs	r3, #2
 80006f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM2_Init+0x110>)
 800070e:	f001 fddf 	bl	80022d0 <HAL_TIM_IC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000718:	f7ff fe5b 	bl	80003d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3740      	adds	r7, #64	; 0x40
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000098 	.word	0x20000098

08000728 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_TIM3_Init+0xe4>)
 800075a:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <MX_TIM3_Init+0xe8>)
 800075c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_TIM3_Init+0xe4>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_TIM3_Init+0xe4>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_TIM3_Init+0xe4>)
 800076c:	2263      	movs	r2, #99	; 0x63
 800076e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_TIM3_Init+0xe4>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_TIM3_Init+0xe4>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800077c:	4823      	ldr	r0, [pc, #140]	; (800080c <MX_TIM3_Init+0xe4>)
 800077e:	f001 fa4f 	bl	8001c20 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000788:	f7ff fe23 	bl	80003d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000796:	4619      	mov	r1, r3
 8000798:	481c      	ldr	r0, [pc, #112]	; (800080c <MX_TIM3_Init+0xe4>)
 800079a:	f001 feeb 	bl	8002574 <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80007a4:	f7ff fe15 	bl	80003d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a8:	4818      	ldr	r0, [pc, #96]	; (800080c <MX_TIM3_Init+0xe4>)
 80007aa:	f001 fad3 	bl	8001d54 <HAL_TIM_PWM_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80007b4:	f7ff fe0d 	bl	80003d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4619      	mov	r1, r3
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_TIM3_Init+0xe4>)
 80007c8:	f002 fc48 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80007d2:	f7ff fdfe 	bl	80003d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <MX_TIM3_Init+0xe4>)
 80007ee:	f001 fe03 	bl	80023f8 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007f8:	f7ff fdeb 	bl	80003d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <MX_TIM3_Init+0xe4>)
 80007fe:	f000 f8a7 	bl	8000950 <HAL_TIM_MspPostInit>

}
 8000802:	bf00      	nop
 8000804:	3738      	adds	r7, #56	; 0x38
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000e0 	.word	0x200000e0
 8000810:	40000400 	.word	0x40000400

08000814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000832:	d13f      	bne.n	80008b4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000834:	4b40      	ldr	r3, [pc, #256]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	61d3      	str	r3, [r2, #28]
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a39      	ldr	r2, [pc, #228]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4830      	ldr	r0, [pc, #192]	; (800093c <HAL_TIM_Base_MspInit+0x128>)
 800087a:	f000 fbf9 	bl	8001070 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <HAL_TIM_Base_MspInit+0x12c>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <HAL_TIM_Base_MspInit+0x12c>)
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	201c      	movs	r0, #28
 80008a8:	f000 fa4b 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ac:	201c      	movs	r0, #28
 80008ae:	f000 fa64 	bl	8000d7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008b2:	e03d      	b.n	8000930 <HAL_TIM_Base_MspInit+0x11c>
  else if(tim_baseHandle->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <HAL_TIM_Base_MspInit+0x130>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d138      	bne.n	8000930 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_TIM_Base_MspInit+0x124>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008d8:	4a1c      	ldr	r2, [pc, #112]	; (800094c <HAL_TIM_Base_MspInit+0x138>)
 80008da:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000908:	480f      	ldr	r0, [pc, #60]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 800090a:	f000 fa51 	bl	8000db0 <HAL_DMA_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_TIM_Base_MspInit+0x104>
      Error_Handler();
 8000914:	f7ff fd5d 	bl	80003d2 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 8000928:	639a      	str	r2, [r3, #56]	; 0x38
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_TIM_Base_MspInit+0x134>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800
 8000940:	40010000 	.word	0x40010000
 8000944:	40000400 	.word	0x40000400
 8000948:	20000128 	.word	0x20000128
 800094c:	4002006c 	.word	0x4002006c

08000950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_TIM_MspPostInit+0x58>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d117      	bne.n	80009a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_TIM_MspPostInit+0x5c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_TIM_MspPostInit+0x5c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_TIM_MspPostInit+0x5c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_TIM_MspPostInit+0x60>)
 800099c:	f000 fb68 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40000400 	.word	0x40000400
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010800 	.word	0x40010800

080009b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART2_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ec:	f002 fba6 	bl	800313c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f7ff fcec 	bl	80003d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000016c 	.word	0x2000016c
 8000a04:	40004400 	.word	0x40004400

08000a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x70>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d123      	bne.n	8000a70 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x74>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_UART_MspInit+0x74>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a32:	61d3      	str	r3, [r2, #28]
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0x74>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_UART_MspInit+0x74>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_UART_MspInit+0x74>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_UART_MspInit+0x74>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_MspInit+0x78>)
 8000a6c:	f000 fb00 	bl	8001070 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800

08000a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aaa:	f7ff fdad 	bl	8000608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fd03 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab2:	f7ff fc25 	bl	8000300 <main>
  bx lr
 8000ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ac0:	08004528 	.word	0x08004528
  ldr r2, =_sbss
 8000ac4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ac8:	200001c4 	.word	0x200001c4

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x28>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f923 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fc76 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f93b 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f903 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x20>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a03      	ldr	r2, [pc, #12]	; (8000b7c <HAL_IncTick+0x20>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	200001b0 	.word	0x200001b0

08000b80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <HAL_GetTick+0x10>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	200001b0 	.word	0x200001b0

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4906      	ldr	r1, [pc, #24]	; (8000c2c <__NVIC_EnableIRQ+0x34>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff90 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff2d 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff42 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff90 	bl	8000c84 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5f 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff35 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e043      	b.n	8000e4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_DMA_Init+0xa8>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <HAL_DMA_Init+0xac>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	009a      	lsls	r2, r3, #2
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_DMA_Init+0xb0>)
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2202      	movs	r2, #2
 8000de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	bffdfff8 	.word	0xbffdfff8
 8000e5c:	cccccccd 	.word	0xcccccccd
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	2204      	movs	r2, #4
 8000e82:	409a      	lsls	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d04f      	beq.n	8000f2c <HAL_DMA_IRQHandler+0xc8>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d04a      	beq.n	8000f2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d107      	bne.n	8000eb4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0204 	bic.w	r2, r2, #4
 8000eb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a66      	ldr	r2, [pc, #408]	; (8001054 <HAL_DMA_IRQHandler+0x1f0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d029      	beq.n	8000f12 <HAL_DMA_IRQHandler+0xae>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a65      	ldr	r2, [pc, #404]	; (8001058 <HAL_DMA_IRQHandler+0x1f4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d022      	beq.n	8000f0e <HAL_DMA_IRQHandler+0xaa>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a63      	ldr	r2, [pc, #396]	; (800105c <HAL_DMA_IRQHandler+0x1f8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01a      	beq.n	8000f08 <HAL_DMA_IRQHandler+0xa4>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a62      	ldr	r2, [pc, #392]	; (8001060 <HAL_DMA_IRQHandler+0x1fc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d012      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x9e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a60      	ldr	r2, [pc, #384]	; (8001064 <HAL_DMA_IRQHandler+0x200>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00a      	beq.n	8000efc <HAL_DMA_IRQHandler+0x98>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a5f      	ldr	r2, [pc, #380]	; (8001068 <HAL_DMA_IRQHandler+0x204>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d102      	bne.n	8000ef6 <HAL_DMA_IRQHandler+0x92>
 8000ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef4:	e00e      	b.n	8000f14 <HAL_DMA_IRQHandler+0xb0>
 8000ef6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000efa:	e00b      	b.n	8000f14 <HAL_DMA_IRQHandler+0xb0>
 8000efc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f00:	e008      	b.n	8000f14 <HAL_DMA_IRQHandler+0xb0>
 8000f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f06:	e005      	b.n	8000f14 <HAL_DMA_IRQHandler+0xb0>
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	e002      	b.n	8000f14 <HAL_DMA_IRQHandler+0xb0>
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	e000      	b.n	8000f14 <HAL_DMA_IRQHandler+0xb0>
 8000f12:	2304      	movs	r3, #4
 8000f14:	4a55      	ldr	r2, [pc, #340]	; (800106c <HAL_DMA_IRQHandler+0x208>)
 8000f16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 8094 	beq.w	800104a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f2a:	e08e      	b.n	800104a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	2202      	movs	r2, #2
 8000f32:	409a      	lsls	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d056      	beq.n	8000fea <HAL_DMA_IRQHandler+0x186>
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d051      	beq.n	8000fea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10b      	bne.n	8000f6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020a 	bic.w	r2, r2, #10
 8000f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a38      	ldr	r2, [pc, #224]	; (8001054 <HAL_DMA_IRQHandler+0x1f0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d029      	beq.n	8000fca <HAL_DMA_IRQHandler+0x166>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a37      	ldr	r2, [pc, #220]	; (8001058 <HAL_DMA_IRQHandler+0x1f4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d022      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x162>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <HAL_DMA_IRQHandler+0x1f8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01a      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x15c>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a34      	ldr	r2, [pc, #208]	; (8001060 <HAL_DMA_IRQHandler+0x1fc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d012      	beq.n	8000fba <HAL_DMA_IRQHandler+0x156>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a32      	ldr	r2, [pc, #200]	; (8001064 <HAL_DMA_IRQHandler+0x200>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00a      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x150>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a31      	ldr	r2, [pc, #196]	; (8001068 <HAL_DMA_IRQHandler+0x204>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d102      	bne.n	8000fae <HAL_DMA_IRQHandler+0x14a>
 8000fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fac:	e00e      	b.n	8000fcc <HAL_DMA_IRQHandler+0x168>
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	e00b      	b.n	8000fcc <HAL_DMA_IRQHandler+0x168>
 8000fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb8:	e008      	b.n	8000fcc <HAL_DMA_IRQHandler+0x168>
 8000fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbe:	e005      	b.n	8000fcc <HAL_DMA_IRQHandler+0x168>
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	e002      	b.n	8000fcc <HAL_DMA_IRQHandler+0x168>
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	e000      	b.n	8000fcc <HAL_DMA_IRQHandler+0x168>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_DMA_IRQHandler+0x208>)
 8000fce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d034      	beq.n	800104a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fe8:	e02f      	b.n	800104a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2208      	movs	r2, #8
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d028      	beq.n	800104c <HAL_DMA_IRQHandler+0x1e8>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d023      	beq.n	800104c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
    }
  }
  return;
 800104a:	bf00      	nop
 800104c:	bf00      	nop
}
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020008 	.word	0x40020008
 8001058:	4002001c 	.word	0x4002001c
 800105c:	40020030 	.word	0x40020030
 8001060:	40020044 	.word	0x40020044
 8001064:	40020058 	.word	0x40020058
 8001068:	4002006c 	.word	0x4002006c
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e169      	b.n	8001358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001084:	2201      	movs	r2, #1
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8158 	bne.w	8001352 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a9a      	ldr	r2, [pc, #616]	; (8001310 <HAL_GPIO_Init+0x2a0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d05e      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010ac:	4a98      	ldr	r2, [pc, #608]	; (8001310 <HAL_GPIO_Init+0x2a0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d875      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010b2:	4a98      	ldr	r2, [pc, #608]	; (8001314 <HAL_GPIO_Init+0x2a4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d058      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010b8:	4a96      	ldr	r2, [pc, #600]	; (8001314 <HAL_GPIO_Init+0x2a4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d86f      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010be:	4a96      	ldr	r2, [pc, #600]	; (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d052      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010c4:	4a94      	ldr	r2, [pc, #592]	; (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d869      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ca:	4a94      	ldr	r2, [pc, #592]	; (800131c <HAL_GPIO_Init+0x2ac>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d04c      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010d0:	4a92      	ldr	r2, [pc, #584]	; (800131c <HAL_GPIO_Init+0x2ac>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d863      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010d6:	4a92      	ldr	r2, [pc, #584]	; (8001320 <HAL_GPIO_Init+0x2b0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d046      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010dc:	4a90      	ldr	r2, [pc, #576]	; (8001320 <HAL_GPIO_Init+0x2b0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d85d      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d82a      	bhi.n	800113c <HAL_GPIO_Init+0xcc>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d859      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <HAL_GPIO_Init+0x80>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001157 	.word	0x08001157
 80010fc:	08001199 	.word	0x08001199
 8001100:	0800119f 	.word	0x0800119f
 8001104:	0800119f 	.word	0x0800119f
 8001108:	0800119f 	.word	0x0800119f
 800110c:	0800119f 	.word	0x0800119f
 8001110:	0800119f 	.word	0x0800119f
 8001114:	0800119f 	.word	0x0800119f
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001161 	.word	0x08001161
 800113c:	4a79      	ldr	r2, [pc, #484]	; (8001324 <HAL_GPIO_Init+0x2b4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e02c      	b.n	800119e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e029      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e024      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	3308      	adds	r3, #8
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e01f      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	330c      	adds	r3, #12
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e01a      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001172:	2304      	movs	r3, #4
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e013      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	611a      	str	r2, [r3, #16]
          break;
 800118a:	e009      	b.n	80011a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	615a      	str	r2, [r3, #20]
          break;
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          break;
 800119e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d801      	bhi.n	80011aa <HAL_GPIO_Init+0x13a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_Init+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	d802      	bhi.n	80011bc <HAL_GPIO_Init+0x14c>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x152>
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3b08      	subs	r3, #8
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	210f      	movs	r1, #15
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80b1 	beq.w	8001352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	4b4d      	ldr	r3, [pc, #308]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001208:	4a48      	ldr	r2, [pc, #288]	; (800132c <HAL_GPIO_Init+0x2bc>)
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d013      	beq.n	800125c <HAL_GPIO_Init+0x1ec>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1e8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3e      	ldr	r2, [pc, #248]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3d      	ldr	r2, [pc, #244]	; (800133c <HAL_GPIO_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1e0>
 800124c:	2303      	movs	r3, #3
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001250:	2304      	movs	r3, #4
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 800125c:	2300      	movs	r3, #0
 800125e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126e:	492f      	ldr	r1, [pc, #188]	; (800132c <HAL_GPIO_Init+0x2bc>)
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	492c      	ldr	r1, [pc, #176]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4928      	ldr	r1, [pc, #160]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4922      	ldr	r1, [pc, #136]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	491e      	ldr	r1, [pc, #120]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4918      	ldr	r1, [pc, #96]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4914      	ldr	r1, [pc, #80]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d021      	beq.n	8001344 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
 800130c:	e021      	b.n	8001352 <HAL_GPIO_Init+0x2e2>
 800130e:	bf00      	nop
 8001310:	10320000 	.word	0x10320000
 8001314:	10310000 	.word	0x10310000
 8001318:	10220000 	.word	0x10220000
 800131c:	10210000 	.word	0x10210000
 8001320:	10120000 	.word	0x10120000
 8001324:	10110000 	.word	0x10110000
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40011000 	.word	0x40011000
 800133c:	40011400 	.word	0x40011400
 8001340:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_GPIO_Init+0x304>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4909      	ldr	r1, [pc, #36]	; (8001374 <HAL_GPIO_Init+0x304>)
 800134e:	4013      	ands	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3301      	adds	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	f47f ae8e 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	372c      	adds	r7, #44	; 0x2c
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f806 	bl	80013d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e272      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8087 	beq.w	800151a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800140c:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b04      	cmp	r3, #4
 8001416:	d00c      	beq.n	8001432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001418:	4b8f      	ldr	r3, [pc, #572]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	2b08      	cmp	r3, #8
 8001422:	d112      	bne.n	800144a <HAL_RCC_OscConfig+0x5e>
 8001424:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001430:	d10b      	bne.n	800144a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001432:	4b89      	ldr	r3, [pc, #548]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d06c      	beq.n	8001518 <HAL_RCC_OscConfig+0x12c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d168      	bne.n	8001518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e24c      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x76>
 8001454:	4b80      	ldr	r3, [pc, #512]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a7f      	ldr	r2, [pc, #508]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800145a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e02e      	b.n	80014c0 <HAL_RCC_OscConfig+0xd4>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x98>
 800146a:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b78      	ldr	r3, [pc, #480]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a77      	ldr	r2, [pc, #476]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e01d      	b.n	80014c0 <HAL_RCC_OscConfig+0xd4>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0xbc>
 800148e:	4b72      	ldr	r3, [pc, #456]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a71      	ldr	r2, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0xd4>
 80014a8:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a67      	ldr	r2, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb5a 	bl	8000b80 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb56 	bl	8000b80 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e200      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0xe4>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb46 	bl	8000b80 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb42 	bl	8000b80 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e1ec      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x10c>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d063      	beq.n	80015ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00b      	beq.n	800154a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001532:	4b49      	ldr	r3, [pc, #292]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d11c      	bne.n	8001578 <HAL_RCC_OscConfig+0x18c>
 800153e:	4b46      	ldr	r3, [pc, #280]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d116      	bne.n	8001578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x176>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d001      	beq.n	8001562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e1c0      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4939      	ldr	r1, [pc, #228]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	e03a      	b.n	80015ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fafb 	bl	8000b80 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff faf7 	bl	8000b80 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1a1      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4927      	ldr	r1, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
 80015c0:	e015      	b.n	80015ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fada 	bl	8000b80 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fad6 	bl	8000b80 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e180      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d03a      	beq.n	8001670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_RCC_OscConfig+0x274>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001608:	f7ff faba 	bl	8000b80 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff fab6 	bl	8000b80 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e160      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_RCC_OscConfig+0x26c>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f000 fad8 	bl	8001be4 <RCC_Delay>
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_RCC_OscConfig+0x274>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff faa0 	bl	8000b80 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001642:	e00f      	b.n	8001664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fa9c 	bl	8000b80 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d908      	bls.n	8001664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e146      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	42420000 	.word	0x42420000
 8001660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e9      	bne.n	8001644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a6 	beq.w	80017ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a87      	ldr	r2, [pc, #540]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_RCC_OscConfig+0x4c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x4c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a7e      	ldr	r2, [pc, #504]	; (80018b4 <HAL_RCC_OscConfig+0x4c8>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa5d 	bl	8000b80 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fa59 	bl	8000b80 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e103      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x4c8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x312>
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	e02d      	b.n	800175a <HAL_RCC_OscConfig+0x36e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x334>
 8001706:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a69      	ldr	r2, [pc, #420]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a66      	ldr	r2, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	e01c      	b.n	800175a <HAL_RCC_OscConfig+0x36e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x356>
 8001728:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a60      	ldr	r2, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x36e>
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d015      	beq.n	800178e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fa0d 	bl	8000b80 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fa09 	bl	8000b80 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0b1      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ee      	beq.n	800176a <HAL_RCC_OscConfig+0x37e>
 800178c:	e014      	b.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff f9f7 	bl	8000b80 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff f9f3 	bl	8000b80 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e09b      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ee      	bne.n	8001796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d105      	bne.n	80017ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8087 	beq.w	80018e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d061      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d146      	bne.n	8001876 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff f9c7 	bl	8000b80 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff f9c3 	bl	8000b80 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e06d      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d108      	bne.n	8001830 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4921      	ldr	r1, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a19      	ldr	r1, [r3, #32]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	430b      	orrs	r3, r1
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x4cc>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff f997 	bl	8000b80 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff f993 	bl	8000b80 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e03d      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x46a>
 8001874:	e035      	b.n	80018e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_OscConfig+0x4cc>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff f980 	bl	8000b80 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f97c 	bl	8000b80 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e026      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x498>
 80018a2:	e01e      	b.n	80018e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e019      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x500>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0d0      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001904:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d910      	bls.n	8001934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0207 	bic.w	r2, r3, #7
 800191a:	4965      	ldr	r1, [pc, #404]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b8      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d020      	beq.n	8001982 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001956:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800196e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	494d      	ldr	r1, [pc, #308]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d040      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d115      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e07f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e073      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e06b      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f023 0203 	bic.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4936      	ldr	r1, [pc, #216]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e0:	f7ff f8ce 	bl	8000b80 <HAL_GetTick>
 80019e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e8:	f7ff f8ca 	bl	8000b80 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e053      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 020c 	and.w	r2, r3, #12
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1eb      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d210      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4922      	ldr	r1, [pc, #136]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e032      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4916      	ldr	r1, [pc, #88]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a7e:	f000 f821 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	490a      	ldr	r1, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	5ccb      	ldrb	r3, [r1, r3]
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1cc>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f82c 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08004470 	.word	0x08004470
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	b490      	push	{r4, r7}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xac>)
 8001acc:	1d3c      	adds	r4, r7, #4
 8001ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ad4:	f240 2301 	movw	r3, #513	; 0x201
 8001ad8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x40>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x46>
 8001b02:	e02b      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b06:	623b      	str	r3, [r7, #32]
      break;
 8001b08:	e02b      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3328      	adds	r3, #40	; 0x28
 8001b14:	443b      	add	r3, r7
 8001b16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0c5b      	lsrs	r3, r3, #17
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	3328      	adds	r3, #40	; 0x28
 8001b32:	443b      	add	r3, r7
 8001b34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b3e:	fb03 f202 	mul.w	r2, r3, r2
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4a:	e004      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	623b      	str	r3, [r7, #32]
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b5e:	623b      	str	r3, [r7, #32]
      break;
 8001b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b62:	6a3b      	ldr	r3, [r7, #32]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc90      	pop	{r4, r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	08004460 	.word	0x08004460
 8001b74:	40021000 	.word	0x40021000
 8001b78:	007a1200 	.word	0x007a1200
 8001b7c:	003d0900 	.word	0x003d0900

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff2 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08004480 	.word	0x08004480

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08004480 	.word	0x08004480

08001be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <RCC_Delay+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <RCC_Delay+0x38>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0a5b      	lsrs	r3, r3, #9
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c00:	bf00      	nop
  }
  while (Delay --);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <RCC_Delay+0x1c>
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	10624dd3 	.word	0x10624dd3

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fde4 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 fdbc 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_TIM_Base_Start+0x88>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_TIM_Base_Start+0x48>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d009      	beq.n	8001d08 <HAL_TIM_Base_Start+0x48>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <HAL_TIM_Base_Start+0x8c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_TIM_Base_Start+0x48>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_TIM_Base_Start+0x90>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d010      	beq.n	8001d3c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	e007      	b.n	8001d3c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800

08001d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e041      	b.n	8001dea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f839 	bl	8001df2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f000 fd22 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f839 	bl	8001ea2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 fcca 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <HAL_TIM_IC_Start_IT+0x1a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	e013      	b.n	8001ef6 <HAL_TIM_IC_Start_IT+0x42>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d104      	bne.n	8001ede <HAL_TIM_IC_Start_IT+0x2a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	e00b      	b.n	8001ef6 <HAL_TIM_IC_Start_IT+0x42>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d104      	bne.n	8001eee <HAL_TIM_IC_Start_IT+0x3a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	e003      	b.n	8001ef6 <HAL_TIM_IC_Start_IT+0x42>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <HAL_TIM_IC_Start_IT+0x54>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e013      	b.n	8001f30 <HAL_TIM_IC_Start_IT+0x7c>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d104      	bne.n	8001f18 <HAL_TIM_IC_Start_IT+0x64>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e00b      	b.n	8001f30 <HAL_TIM_IC_Start_IT+0x7c>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d104      	bne.n	8001f28 <HAL_TIM_IC_Start_IT+0x74>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e003      	b.n	8001f30 <HAL_TIM_IC_Start_IT+0x7c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d102      	bne.n	8001f3e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0b3      	b.n	80020aa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_IC_Start_IT+0x9e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f50:	e013      	b.n	8001f7a <HAL_TIM_IC_Start_IT+0xc6>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_IC_Start_IT+0xae>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	e00b      	b.n	8001f7a <HAL_TIM_IC_Start_IT+0xc6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d104      	bne.n	8001f72 <HAL_TIM_IC_Start_IT+0xbe>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f70:	e003      	b.n	8001f7a <HAL_TIM_IC_Start_IT+0xc6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <HAL_TIM_IC_Start_IT+0xd6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f88:	e013      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0xfe>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d104      	bne.n	8001f9a <HAL_TIM_IC_Start_IT+0xe6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f98:	e00b      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0xfe>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d104      	bne.n	8001faa <HAL_TIM_IC_Start_IT+0xf6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa8:	e003      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0xfe>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d841      	bhi.n	800203c <HAL_TIM_IC_Start_IT+0x188>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <HAL_TIM_IC_Start_IT+0x10c>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001ff5 	.word	0x08001ff5
 8001fc4:	0800203d 	.word	0x0800203d
 8001fc8:	0800203d 	.word	0x0800203d
 8001fcc:	0800203d 	.word	0x0800203d
 8001fd0:	08002007 	.word	0x08002007
 8001fd4:	0800203d 	.word	0x0800203d
 8001fd8:	0800203d 	.word	0x0800203d
 8001fdc:	0800203d 	.word	0x0800203d
 8001fe0:	08002019 	.word	0x08002019
 8001fe4:	0800203d 	.word	0x0800203d
 8001fe8:	0800203d 	.word	0x0800203d
 8001fec:	0800203d 	.word	0x0800203d
 8001ff0:	0800202b 	.word	0x0800202b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0202 	orr.w	r2, r2, #2
 8002002:	60da      	str	r2, [r3, #12]
      break;
 8002004:	e01b      	b.n	800203e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0204 	orr.w	r2, r2, #4
 8002014:	60da      	str	r2, [r3, #12]
      break;
 8002016:	e012      	b.n	800203e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0208 	orr.w	r2, r2, #8
 8002026:	60da      	str	r2, [r3, #12]
      break;
 8002028:	e009      	b.n	800203e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0210 	orr.w	r2, r2, #16
 8002038:	60da      	str	r2, [r3, #12]
      break;
 800203a:	e000      	b.n	800203e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800203c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 ffe3 	bl	8003012 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_TIM_IC_Start_IT+0x200>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00e      	beq.n	8002074 <HAL_TIM_IC_Start_IT+0x1c0>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d009      	beq.n	8002074 <HAL_TIM_IC_Start_IT+0x1c0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_TIM_IC_Start_IT+0x204>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_TIM_IC_Start_IT+0x1c0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <HAL_TIM_IC_Start_IT+0x208>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d111      	bne.n	8002098 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b06      	cmp	r3, #6
 8002084:	d010      	beq.n	80020a8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002096:	e007      	b.n	80020a8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800

080020c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d122      	bne.n	800211c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d11b      	bne.n	800211c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0202 	mvn.w	r2, #2
 80020ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fb4e 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fb41 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb50 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	d122      	bne.n	8002170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d11b      	bne.n	8002170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0204 	mvn.w	r2, #4
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fb24 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fb17 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fb26 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d122      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b08      	cmp	r3, #8
 800218a:	d11b      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0208 	mvn.w	r2, #8
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fafa 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 faed 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fafc 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d122      	bne.n	8002218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d11b      	bne.n	8002218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0210 	mvn.w	r2, #16
 80021e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2208      	movs	r2, #8
 80021ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fad0 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fac3 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fad2 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0201 	mvn.w	r2, #1
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa9e 	bl	8002780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 ff5d 	bl	800312a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fa96 	bl	80027c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0220 	mvn.w	r2, #32
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 ff28 	bl	8003118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_IC_ConfigChannel+0x1a>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e082      	b.n	80023f0 <HAL_TIM_IC_ConfigChannel+0x120>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11b      	bne.n	8002330 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f000 fce0 	bl	8002ccc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 020c 	bic.w	r2, r2, #12
 800231a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	619a      	str	r2, [r3, #24]
 800232e:	e05a      	b.n	80023e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d11c      	bne.n	8002370 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f000 fd49 	bl	8002ddc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002358:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6999      	ldr	r1, [r3, #24]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	021a      	lsls	r2, r3, #8
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	e03a      	b.n	80023e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11b      	bne.n	80023ae <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f000 fd94 	bl	8002eb2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 020c 	bic.w	r2, r2, #12
 8002398:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
 80023ac:	e01b      	b.n	80023e6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f000 fdb3 	bl	8002f28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69d9      	ldr	r1, [r3, #28]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800240e:	2302      	movs	r3, #2
 8002410:	e0ac      	b.n	800256c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	f200 809f 	bhi.w	8002560 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	0800245d 	.word	0x0800245d
 800242c:	08002561 	.word	0x08002561
 8002430:	08002561 	.word	0x08002561
 8002434:	08002561 	.word	0x08002561
 8002438:	0800249d 	.word	0x0800249d
 800243c:	08002561 	.word	0x08002561
 8002440:	08002561 	.word	0x08002561
 8002444:	08002561 	.word	0x08002561
 8002448:	080024df 	.word	0x080024df
 800244c:	08002561 	.word	0x08002561
 8002450:	08002561 	.word	0x08002561
 8002454:	08002561 	.word	0x08002561
 8002458:	0800251f 	.word	0x0800251f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fa1c 	bl	80028a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6999      	ldr	r1, [r3, #24]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	619a      	str	r2, [r3, #24]
      break;
 800249a:	e062      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fa62 	bl	800296c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6999      	ldr	r1, [r3, #24]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	021a      	lsls	r2, r3, #8
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	619a      	str	r2, [r3, #24]
      break;
 80024dc:	e041      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 faab 	bl	8002a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0208 	orr.w	r2, r2, #8
 80024f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69da      	ldr	r2, [r3, #28]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0204 	bic.w	r2, r2, #4
 8002508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69d9      	ldr	r1, [r3, #28]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	61da      	str	r2, [r3, #28]
      break;
 800251c:	e021      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 faf5 	bl	8002b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69d9      	ldr	r1, [r3, #28]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	021a      	lsls	r2, r3, #8
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	61da      	str	r2, [r3, #28]
      break;
 800255e:	e000      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002560:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_TIM_ConfigClockSource+0x18>
 8002588:	2302      	movs	r3, #2
 800258a:	e0b3      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x180>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c4:	d03e      	beq.n	8002644 <HAL_TIM_ConfigClockSource+0xd0>
 80025c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ca:	f200 8087 	bhi.w	80026dc <HAL_TIM_ConfigClockSource+0x168>
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	f000 8085 	beq.w	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d87f      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 80025dc:	2b70      	cmp	r3, #112	; 0x70
 80025de:	d01a      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0xa2>
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d87b      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 80025e4:	2b60      	cmp	r3, #96	; 0x60
 80025e6:	d050      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x116>
 80025e8:	2b60      	cmp	r3, #96	; 0x60
 80025ea:	d877      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 80025ec:	2b50      	cmp	r3, #80	; 0x50
 80025ee:	d03c      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xf6>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d873      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d058      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x136>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d86f      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 80025fc:	2b30      	cmp	r3, #48	; 0x30
 80025fe:	d064      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x156>
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d86b      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d060      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x156>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d867      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d05c      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x156>
 8002610:	2b10      	cmp	r3, #16
 8002612:	d05a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002614:	e062      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f000 fcd5 	bl	8002fd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002638:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	609a      	str	r2, [r3, #8]
      break;
 8002642:	e04e      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f000 fcbe 	bl	8002fd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002666:	609a      	str	r2, [r3, #8]
      break;
 8002668:	e03b      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	461a      	mov	r2, r3
 8002678:	f000 fb82 	bl	8002d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2150      	movs	r1, #80	; 0x50
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fc8c 	bl	8002fa0 <TIM_ITRx_SetConfig>
      break;
 8002688:	e02b      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	f000 fbdc 	bl	8002e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2160      	movs	r1, #96	; 0x60
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fc7c 	bl	8002fa0 <TIM_ITRx_SetConfig>
      break;
 80026a8:	e01b      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f000 fb62 	bl	8002d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2140      	movs	r1, #64	; 0x40
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fc6c 	bl	8002fa0 <TIM_ITRx_SetConfig>
      break;
 80026c8:	e00b      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 fc63 	bl	8002fa0 <TIM_ITRx_SetConfig>
        break;
 80026da:	e002      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026dc:	bf00      	nop
 80026de:	e000      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002710:	2302      	movs	r3, #2
 8002712:	e031      	b.n	8002778 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa42 	bl	8002bb0 <TIM_SlaveTimer_SetConfig>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e018      	b.n	8002778 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002754:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002764:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a29      	ldr	r2, [pc, #164]	; (8002894 <TIM_Base_SetConfig+0xb8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00b      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fa:	d007      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a26      	ldr	r2, [pc, #152]	; (8002898 <TIM_Base_SetConfig+0xbc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <TIM_Base_SetConfig+0xc0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d108      	bne.n	800281e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <TIM_Base_SetConfig+0xb8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00b      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d007      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <TIM_Base_SetConfig+0xbc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a18      	ldr	r2, [pc, #96]	; (800289c <TIM_Base_SetConfig+0xc0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <TIM_Base_SetConfig+0xb8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800

080028a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <TIM_OC1_SetConfig+0xc8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d10c      	bne.n	8002916 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0308 	bic.w	r3, r3, #8
 8002902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <TIM_OC1_SetConfig+0xc8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d111      	bne.n	8002942 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800292c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	621a      	str	r2, [r3, #32]
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00

0800296c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 0210 	bic.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f023 0320 	bic.w	r3, r3, #32
 80029b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <TIM_OC2_SetConfig+0xd0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10d      	bne.n	80029e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <TIM_OC2_SetConfig+0xd0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d113      	bne.n	8002a18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00

08002a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <TIM_OC3_SetConfig+0xd0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <TIM_OC3_SetConfig+0xd0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d113      	bne.n	8002aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00

08002b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <TIM_OC4_SetConfig+0x98>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d109      	bne.n	8002b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40012c00 	.word	0x40012c00

08002bb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b70      	cmp	r3, #112	; 0x70
 8002bf4:	d01a      	beq.n	8002c2c <TIM_SlaveTimer_SetConfig+0x7c>
 8002bf6:	2b70      	cmp	r3, #112	; 0x70
 8002bf8:	d860      	bhi.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
 8002bfa:	2b60      	cmp	r3, #96	; 0x60
 8002bfc:	d054      	beq.n	8002ca8 <TIM_SlaveTimer_SetConfig+0xf8>
 8002bfe:	2b60      	cmp	r3, #96	; 0x60
 8002c00:	d85c      	bhi.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
 8002c02:	2b50      	cmp	r3, #80	; 0x50
 8002c04:	d046      	beq.n	8002c94 <TIM_SlaveTimer_SetConfig+0xe4>
 8002c06:	2b50      	cmp	r3, #80	; 0x50
 8002c08:	d858      	bhi.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d019      	beq.n	8002c42 <TIM_SlaveTimer_SetConfig+0x92>
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d854      	bhi.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
 8002c12:	2b30      	cmp	r3, #48	; 0x30
 8002c14:	d054      	beq.n	8002cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8002c16:	2b30      	cmp	r3, #48	; 0x30
 8002c18:	d850      	bhi.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d050      	beq.n	8002cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d84c      	bhi.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d04c      	beq.n	8002cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d04a      	beq.n	8002cc0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002c2a:	e047      	b.n	8002cbc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68d9      	ldr	r1, [r3, #12]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f000 f9ca 	bl	8002fd4 <TIM_ETR_SetConfig>
      break;
 8002c40:	e03f      	b.n	8002cc2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d101      	bne.n	8002c4e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03a      	b.n	8002cc4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c74:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
      break;
 8002c92:	e016      	b.n	8002cc2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f000 f86d 	bl	8002d80 <TIM_TI1_ConfigInputStage>
      break;
 8002ca6:	e00c      	b.n	8002cc2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f000 f8cd 	bl	8002e54 <TIM_TI2_ConfigInputStage>
      break;
 8002cba:	e002      	b.n	8002cc2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e000      	b.n	8002cc2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002cc0:	bf00      	nop
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <TIM_TI1_SetConfig+0xa8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_TI1_SetConfig+0x46>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d007      	beq.n	8002d12 <TIM_TI1_SetConfig+0x46>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <TIM_TI1_SetConfig+0xac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_TI1_SetConfig+0x46>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <TIM_TI1_SetConfig+0xb0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <TIM_TI1_SetConfig+0x4a>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <TIM_TI1_SetConfig+0x4c>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e003      	b.n	8002d36 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f023 030a 	bic.w	r3, r3, #10
 8002d50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 030a 	and.w	r3, r3, #10
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800

08002d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 030a 	bic.w	r3, r3, #10
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0210 	bic.w	r2, r3, #16
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 0210 	bic.w	r2, r3, #16
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	031b      	lsls	r3, r3, #12
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	621a      	str	r2, [r3, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	031b      	lsls	r3, r3, #12
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f043 0307 	orr.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	609a      	str	r2, [r3, #8]
}
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003012:	b480      	push	{r7}
 8003014:	b087      	sub	sp, #28
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2201      	movs	r2, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	43db      	mvns	r3, r3
 8003034:	401a      	ands	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
	...

0800305c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003070:	2302      	movs	r3, #2
 8003072:	e046      	b.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d009      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800

08003118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e03f      	b.n	80031ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fc50 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f905 	bl	8003390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b08a      	sub	sp, #40	; 0x28
 80031da:	af02      	add	r7, sp, #8
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d17c      	bne.n	80032f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_UART_Transmit+0x2c>
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e075      	b.n	80032f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_UART_Transmit+0x3e>
 8003210:	2302      	movs	r3, #2
 8003212:	e06e      	b.n	80032f2 <HAL_UART_Transmit+0x11c>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2221      	movs	r2, #33	; 0x21
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800322a:	f7fd fca9 	bl	8000b80 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003244:	d108      	bne.n	8003258 <HAL_UART_Transmit+0x82>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e003      	b.n	8003260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003268:	e02a      	b.n	80032c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f840 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e036      	b.n	80032f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	3302      	adds	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	e007      	b.n	80032b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3301      	adds	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1cf      	bne.n	800326a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f810 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e006      	b.n	80032f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330a:	e02c      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d028      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x30>
 800331a:	f7fd fc31 	bl	8000b80 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	429a      	cmp	r2, r3
 8003328:	d21d      	bcs.n	8003366 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003338:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d0c3      	beq.n	800330c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033ca:	f023 030c 	bic.w	r3, r3, #12
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <UART_SetConfig+0x114>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7fe fbe0 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	e002      	b.n	8003406 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003400:	f7fe fbc8 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8003404:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009a      	lsls	r2, r3, #2
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <UART_SetConfig+0x118>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	0119      	lsls	r1, r3, #4
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <UART_SetConfig+0x118>)
 800343e:	fba3 0302 	umull	r0, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	fb00 f303 	mul.w	r3, r0, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <UART_SetConfig+0x118>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345c:	4419      	add	r1, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009a      	lsls	r2, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fbb2 f2f3 	udiv	r2, r2, r3
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <UART_SetConfig+0x118>)
 8003476:	fba3 0302 	umull	r0, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2064      	movs	r0, #100	; 0x64
 800347e:	fb00 f303 	mul.w	r3, r0, r3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	3332      	adds	r3, #50	; 0x32
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <UART_SetConfig+0x118>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	440a      	add	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013800 	.word	0x40013800
 80034a8:	51eb851f 	.word	0x51eb851f

080034ac <__errno>:
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <__errno+0x8>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2600      	movs	r6, #0
 80034bc:	4d0c      	ldr	r5, [pc, #48]	; (80034f0 <__libc_init_array+0x38>)
 80034be:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	f000 ffb6 	bl	8004438 <_init>
 80034cc:	2600      	movs	r6, #0
 80034ce:	4d0a      	ldr	r5, [pc, #40]	; (80034f8 <__libc_init_array+0x40>)
 80034d0:	4c0a      	ldr	r4, [pc, #40]	; (80034fc <__libc_init_array+0x44>)
 80034d2:	1b64      	subs	r4, r4, r5
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08004520 	.word	0x08004520
 80034f4:	08004520 	.word	0x08004520
 80034f8:	08004520 	.word	0x08004520
 80034fc:	08004524 	.word	0x08004524

08003500 <memset>:
 8003500:	4603      	mov	r3, r0
 8003502:	4402      	add	r2, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <iprintf>:
 8003510:	b40f      	push	{r0, r1, r2, r3}
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <iprintf+0x2c>)
 8003514:	b513      	push	{r0, r1, r4, lr}
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	b124      	cbz	r4, 8003524 <iprintf+0x14>
 800351a:	69a3      	ldr	r3, [r4, #24]
 800351c:	b913      	cbnz	r3, 8003524 <iprintf+0x14>
 800351e:	4620      	mov	r0, r4
 8003520:	f000 f866 	bl	80035f0 <__sinit>
 8003524:	ab05      	add	r3, sp, #20
 8003526:	4620      	mov	r0, r4
 8003528:	9a04      	ldr	r2, [sp, #16]
 800352a:	68a1      	ldr	r1, [r4, #8]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	f000 f9bb 	bl	80038a8 <_vfiprintf_r>
 8003532:	b002      	add	sp, #8
 8003534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003538:	b004      	add	sp, #16
 800353a:	4770      	bx	lr
 800353c:	2000000c 	.word	0x2000000c

08003540 <std>:
 8003540:	2300      	movs	r3, #0
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	e9c0 3300 	strd	r3, r3, [r0]
 800354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354e:	6083      	str	r3, [r0, #8]
 8003550:	8181      	strh	r1, [r0, #12]
 8003552:	6643      	str	r3, [r0, #100]	; 0x64
 8003554:	81c2      	strh	r2, [r0, #14]
 8003556:	6183      	str	r3, [r0, #24]
 8003558:	4619      	mov	r1, r3
 800355a:	2208      	movs	r2, #8
 800355c:	305c      	adds	r0, #92	; 0x5c
 800355e:	f7ff ffcf 	bl	8003500 <memset>
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <std+0x38>)
 8003564:	6224      	str	r4, [r4, #32]
 8003566:	6263      	str	r3, [r4, #36]	; 0x24
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <std+0x3c>)
 800356a:	62a3      	str	r3, [r4, #40]	; 0x28
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <std+0x40>)
 800356e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <std+0x44>)
 8003572:	6323      	str	r3, [r4, #48]	; 0x30
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	08003e55 	.word	0x08003e55
 800357c:	08003e77 	.word	0x08003e77
 8003580:	08003eaf 	.word	0x08003eaf
 8003584:	08003ed3 	.word	0x08003ed3

08003588 <_cleanup_r>:
 8003588:	4901      	ldr	r1, [pc, #4]	; (8003590 <_cleanup_r+0x8>)
 800358a:	f000 b8af 	b.w	80036ec <_fwalk_reent>
 800358e:	bf00      	nop
 8003590:	080041a5 	.word	0x080041a5

08003594 <__sfmoreglue>:
 8003594:	2268      	movs	r2, #104	; 0x68
 8003596:	b570      	push	{r4, r5, r6, lr}
 8003598:	1e4d      	subs	r5, r1, #1
 800359a:	4355      	muls	r5, r2
 800359c:	460e      	mov	r6, r1
 800359e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035a2:	f000 f8e5 	bl	8003770 <_malloc_r>
 80035a6:	4604      	mov	r4, r0
 80035a8:	b140      	cbz	r0, 80035bc <__sfmoreglue+0x28>
 80035aa:	2100      	movs	r1, #0
 80035ac:	e9c0 1600 	strd	r1, r6, [r0]
 80035b0:	300c      	adds	r0, #12
 80035b2:	60a0      	str	r0, [r4, #8]
 80035b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035b8:	f7ff ffa2 	bl	8003500 <memset>
 80035bc:	4620      	mov	r0, r4
 80035be:	bd70      	pop	{r4, r5, r6, pc}

080035c0 <__sfp_lock_acquire>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__sfp_lock_acquire+0x8>)
 80035c2:	f000 b8b3 	b.w	800372c <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	200001b5 	.word	0x200001b5

080035cc <__sfp_lock_release>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__sfp_lock_release+0x8>)
 80035ce:	f000 b8ae 	b.w	800372e <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	200001b5 	.word	0x200001b5

080035d8 <__sinit_lock_acquire>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__sinit_lock_acquire+0x8>)
 80035da:	f000 b8a7 	b.w	800372c <__retarget_lock_acquire_recursive>
 80035de:	bf00      	nop
 80035e0:	200001b6 	.word	0x200001b6

080035e4 <__sinit_lock_release>:
 80035e4:	4801      	ldr	r0, [pc, #4]	; (80035ec <__sinit_lock_release+0x8>)
 80035e6:	f000 b8a2 	b.w	800372e <__retarget_lock_release_recursive>
 80035ea:	bf00      	nop
 80035ec:	200001b6 	.word	0x200001b6

080035f0 <__sinit>:
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
 80035f4:	f7ff fff0 	bl	80035d8 <__sinit_lock_acquire>
 80035f8:	69a3      	ldr	r3, [r4, #24]
 80035fa:	b11b      	cbz	r3, 8003604 <__sinit+0x14>
 80035fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003600:	f7ff bff0 	b.w	80035e4 <__sinit_lock_release>
 8003604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003608:	6523      	str	r3, [r4, #80]	; 0x50
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <__sinit+0x68>)
 800360c:	4a13      	ldr	r2, [pc, #76]	; (800365c <__sinit+0x6c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	62a2      	str	r2, [r4, #40]	; 0x28
 8003612:	42a3      	cmp	r3, r4
 8003614:	bf08      	it	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	4620      	mov	r0, r4
 800361a:	bf08      	it	eq
 800361c:	61a3      	streq	r3, [r4, #24]
 800361e:	f000 f81f 	bl	8003660 <__sfp>
 8003622:	6060      	str	r0, [r4, #4]
 8003624:	4620      	mov	r0, r4
 8003626:	f000 f81b 	bl	8003660 <__sfp>
 800362a:	60a0      	str	r0, [r4, #8]
 800362c:	4620      	mov	r0, r4
 800362e:	f000 f817 	bl	8003660 <__sfp>
 8003632:	2200      	movs	r2, #0
 8003634:	2104      	movs	r1, #4
 8003636:	60e0      	str	r0, [r4, #12]
 8003638:	6860      	ldr	r0, [r4, #4]
 800363a:	f7ff ff81 	bl	8003540 <std>
 800363e:	2201      	movs	r2, #1
 8003640:	2109      	movs	r1, #9
 8003642:	68a0      	ldr	r0, [r4, #8]
 8003644:	f7ff ff7c 	bl	8003540 <std>
 8003648:	2202      	movs	r2, #2
 800364a:	2112      	movs	r1, #18
 800364c:	68e0      	ldr	r0, [r4, #12]
 800364e:	f7ff ff77 	bl	8003540 <std>
 8003652:	2301      	movs	r3, #1
 8003654:	61a3      	str	r3, [r4, #24]
 8003656:	e7d1      	b.n	80035fc <__sinit+0xc>
 8003658:	08004488 	.word	0x08004488
 800365c:	08003589 	.word	0x08003589

08003660 <__sfp>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	4607      	mov	r7, r0
 8003664:	f7ff ffac 	bl	80035c0 <__sfp_lock_acquire>
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <__sfp+0x84>)
 800366a:	681e      	ldr	r6, [r3, #0]
 800366c:	69b3      	ldr	r3, [r6, #24]
 800366e:	b913      	cbnz	r3, 8003676 <__sfp+0x16>
 8003670:	4630      	mov	r0, r6
 8003672:	f7ff ffbd 	bl	80035f0 <__sinit>
 8003676:	3648      	adds	r6, #72	; 0x48
 8003678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800367c:	3b01      	subs	r3, #1
 800367e:	d503      	bpl.n	8003688 <__sfp+0x28>
 8003680:	6833      	ldr	r3, [r6, #0]
 8003682:	b30b      	cbz	r3, 80036c8 <__sfp+0x68>
 8003684:	6836      	ldr	r6, [r6, #0]
 8003686:	e7f7      	b.n	8003678 <__sfp+0x18>
 8003688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800368c:	b9d5      	cbnz	r5, 80036c4 <__sfp+0x64>
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <__sfp+0x88>)
 8003690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003694:	60e3      	str	r3, [r4, #12]
 8003696:	6665      	str	r5, [r4, #100]	; 0x64
 8003698:	f000 f847 	bl	800372a <__retarget_lock_init_recursive>
 800369c:	f7ff ff96 	bl	80035cc <__sfp_lock_release>
 80036a0:	2208      	movs	r2, #8
 80036a2:	4629      	mov	r1, r5
 80036a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036ac:	6025      	str	r5, [r4, #0]
 80036ae:	61a5      	str	r5, [r4, #24]
 80036b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036b4:	f7ff ff24 	bl	8003500 <memset>
 80036b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036c0:	4620      	mov	r0, r4
 80036c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c4:	3468      	adds	r4, #104	; 0x68
 80036c6:	e7d9      	b.n	800367c <__sfp+0x1c>
 80036c8:	2104      	movs	r1, #4
 80036ca:	4638      	mov	r0, r7
 80036cc:	f7ff ff62 	bl	8003594 <__sfmoreglue>
 80036d0:	4604      	mov	r4, r0
 80036d2:	6030      	str	r0, [r6, #0]
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d1d5      	bne.n	8003684 <__sfp+0x24>
 80036d8:	f7ff ff78 	bl	80035cc <__sfp_lock_release>
 80036dc:	230c      	movs	r3, #12
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	e7ee      	b.n	80036c0 <__sfp+0x60>
 80036e2:	bf00      	nop
 80036e4:	08004488 	.word	0x08004488
 80036e8:	ffff0001 	.word	0xffff0001

080036ec <_fwalk_reent>:
 80036ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f0:	4606      	mov	r6, r0
 80036f2:	4688      	mov	r8, r1
 80036f4:	2700      	movs	r7, #0
 80036f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036fe:	f1b9 0901 	subs.w	r9, r9, #1
 8003702:	d505      	bpl.n	8003710 <_fwalk_reent+0x24>
 8003704:	6824      	ldr	r4, [r4, #0]
 8003706:	2c00      	cmp	r4, #0
 8003708:	d1f7      	bne.n	80036fa <_fwalk_reent+0xe>
 800370a:	4638      	mov	r0, r7
 800370c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003710:	89ab      	ldrh	r3, [r5, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d907      	bls.n	8003726 <_fwalk_reent+0x3a>
 8003716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800371a:	3301      	adds	r3, #1
 800371c:	d003      	beq.n	8003726 <_fwalk_reent+0x3a>
 800371e:	4629      	mov	r1, r5
 8003720:	4630      	mov	r0, r6
 8003722:	47c0      	blx	r8
 8003724:	4307      	orrs	r7, r0
 8003726:	3568      	adds	r5, #104	; 0x68
 8003728:	e7e9      	b.n	80036fe <_fwalk_reent+0x12>

0800372a <__retarget_lock_init_recursive>:
 800372a:	4770      	bx	lr

0800372c <__retarget_lock_acquire_recursive>:
 800372c:	4770      	bx	lr

0800372e <__retarget_lock_release_recursive>:
 800372e:	4770      	bx	lr

08003730 <sbrk_aligned>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4e0e      	ldr	r6, [pc, #56]	; (800376c <sbrk_aligned+0x3c>)
 8003734:	460c      	mov	r4, r1
 8003736:	6831      	ldr	r1, [r6, #0]
 8003738:	4605      	mov	r5, r0
 800373a:	b911      	cbnz	r1, 8003742 <sbrk_aligned+0x12>
 800373c:	f000 fb7a 	bl	8003e34 <_sbrk_r>
 8003740:	6030      	str	r0, [r6, #0]
 8003742:	4621      	mov	r1, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 fb75 	bl	8003e34 <_sbrk_r>
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	d00a      	beq.n	8003764 <sbrk_aligned+0x34>
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d007      	beq.n	8003768 <sbrk_aligned+0x38>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fb6a 	bl	8003e34 <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d101      	bne.n	8003768 <sbrk_aligned+0x38>
 8003764:	f04f 34ff 	mov.w	r4, #4294967295
 8003768:	4620      	mov	r0, r4
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	200001bc 	.word	0x200001bc

08003770 <_malloc_r>:
 8003770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003774:	1ccd      	adds	r5, r1, #3
 8003776:	f025 0503 	bic.w	r5, r5, #3
 800377a:	3508      	adds	r5, #8
 800377c:	2d0c      	cmp	r5, #12
 800377e:	bf38      	it	cc
 8003780:	250c      	movcc	r5, #12
 8003782:	2d00      	cmp	r5, #0
 8003784:	4607      	mov	r7, r0
 8003786:	db01      	blt.n	800378c <_malloc_r+0x1c>
 8003788:	42a9      	cmp	r1, r5
 800378a:	d905      	bls.n	8003798 <_malloc_r+0x28>
 800378c:	230c      	movs	r3, #12
 800378e:	2600      	movs	r6, #0
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4630      	mov	r0, r6
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	4e2e      	ldr	r6, [pc, #184]	; (8003854 <_malloc_r+0xe4>)
 800379a:	f000 fdc5 	bl	8004328 <__malloc_lock>
 800379e:	6833      	ldr	r3, [r6, #0]
 80037a0:	461c      	mov	r4, r3
 80037a2:	bb34      	cbnz	r4, 80037f2 <_malloc_r+0x82>
 80037a4:	4629      	mov	r1, r5
 80037a6:	4638      	mov	r0, r7
 80037a8:	f7ff ffc2 	bl	8003730 <sbrk_aligned>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	4604      	mov	r4, r0
 80037b0:	d14d      	bne.n	800384e <_malloc_r+0xde>
 80037b2:	6834      	ldr	r4, [r6, #0]
 80037b4:	4626      	mov	r6, r4
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	d140      	bne.n	800383c <_malloc_r+0xcc>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	4631      	mov	r1, r6
 80037be:	4638      	mov	r0, r7
 80037c0:	eb04 0803 	add.w	r8, r4, r3
 80037c4:	f000 fb36 	bl	8003e34 <_sbrk_r>
 80037c8:	4580      	cmp	r8, r0
 80037ca:	d13a      	bne.n	8003842 <_malloc_r+0xd2>
 80037cc:	6821      	ldr	r1, [r4, #0]
 80037ce:	3503      	adds	r5, #3
 80037d0:	1a6d      	subs	r5, r5, r1
 80037d2:	f025 0503 	bic.w	r5, r5, #3
 80037d6:	3508      	adds	r5, #8
 80037d8:	2d0c      	cmp	r5, #12
 80037da:	bf38      	it	cc
 80037dc:	250c      	movcc	r5, #12
 80037de:	4638      	mov	r0, r7
 80037e0:	4629      	mov	r1, r5
 80037e2:	f7ff ffa5 	bl	8003730 <sbrk_aligned>
 80037e6:	3001      	adds	r0, #1
 80037e8:	d02b      	beq.n	8003842 <_malloc_r+0xd2>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	442b      	add	r3, r5
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	e00e      	b.n	8003810 <_malloc_r+0xa0>
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	1b52      	subs	r2, r2, r5
 80037f6:	d41e      	bmi.n	8003836 <_malloc_r+0xc6>
 80037f8:	2a0b      	cmp	r2, #11
 80037fa:	d916      	bls.n	800382a <_malloc_r+0xba>
 80037fc:	1961      	adds	r1, r4, r5
 80037fe:	42a3      	cmp	r3, r4
 8003800:	6025      	str	r5, [r4, #0]
 8003802:	bf18      	it	ne
 8003804:	6059      	strne	r1, [r3, #4]
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	bf08      	it	eq
 800380a:	6031      	streq	r1, [r6, #0]
 800380c:	5162      	str	r2, [r4, r5]
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	4638      	mov	r0, r7
 8003812:	f104 060b 	add.w	r6, r4, #11
 8003816:	f000 fd8d 	bl	8004334 <__malloc_unlock>
 800381a:	f026 0607 	bic.w	r6, r6, #7
 800381e:	1d23      	adds	r3, r4, #4
 8003820:	1af2      	subs	r2, r6, r3
 8003822:	d0b6      	beq.n	8003792 <_malloc_r+0x22>
 8003824:	1b9b      	subs	r3, r3, r6
 8003826:	50a3      	str	r3, [r4, r2]
 8003828:	e7b3      	b.n	8003792 <_malloc_r+0x22>
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	42a3      	cmp	r3, r4
 800382e:	bf0c      	ite	eq
 8003830:	6032      	streq	r2, [r6, #0]
 8003832:	605a      	strne	r2, [r3, #4]
 8003834:	e7ec      	b.n	8003810 <_malloc_r+0xa0>
 8003836:	4623      	mov	r3, r4
 8003838:	6864      	ldr	r4, [r4, #4]
 800383a:	e7b2      	b.n	80037a2 <_malloc_r+0x32>
 800383c:	4634      	mov	r4, r6
 800383e:	6876      	ldr	r6, [r6, #4]
 8003840:	e7b9      	b.n	80037b6 <_malloc_r+0x46>
 8003842:	230c      	movs	r3, #12
 8003844:	4638      	mov	r0, r7
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	f000 fd74 	bl	8004334 <__malloc_unlock>
 800384c:	e7a1      	b.n	8003792 <_malloc_r+0x22>
 800384e:	6025      	str	r5, [r4, #0]
 8003850:	e7de      	b.n	8003810 <_malloc_r+0xa0>
 8003852:	bf00      	nop
 8003854:	200001b8 	.word	0x200001b8

08003858 <__sfputc_r>:
 8003858:	6893      	ldr	r3, [r2, #8]
 800385a:	b410      	push	{r4}
 800385c:	3b01      	subs	r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	6093      	str	r3, [r2, #8]
 8003862:	da07      	bge.n	8003874 <__sfputc_r+0x1c>
 8003864:	6994      	ldr	r4, [r2, #24]
 8003866:	42a3      	cmp	r3, r4
 8003868:	db01      	blt.n	800386e <__sfputc_r+0x16>
 800386a:	290a      	cmp	r1, #10
 800386c:	d102      	bne.n	8003874 <__sfputc_r+0x1c>
 800386e:	bc10      	pop	{r4}
 8003870:	f000 bb34 	b.w	8003edc <__swbuf_r>
 8003874:	6813      	ldr	r3, [r2, #0]
 8003876:	1c58      	adds	r0, r3, #1
 8003878:	6010      	str	r0, [r2, #0]
 800387a:	7019      	strb	r1, [r3, #0]
 800387c:	4608      	mov	r0, r1
 800387e:	bc10      	pop	{r4}
 8003880:	4770      	bx	lr

08003882 <__sfputs_r>:
 8003882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003884:	4606      	mov	r6, r0
 8003886:	460f      	mov	r7, r1
 8003888:	4614      	mov	r4, r2
 800388a:	18d5      	adds	r5, r2, r3
 800388c:	42ac      	cmp	r4, r5
 800388e:	d101      	bne.n	8003894 <__sfputs_r+0x12>
 8003890:	2000      	movs	r0, #0
 8003892:	e007      	b.n	80038a4 <__sfputs_r+0x22>
 8003894:	463a      	mov	r2, r7
 8003896:	4630      	mov	r0, r6
 8003898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800389c:	f7ff ffdc 	bl	8003858 <__sfputc_r>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d1f3      	bne.n	800388c <__sfputs_r+0xa>
 80038a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038a8 <_vfiprintf_r>:
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	460d      	mov	r5, r1
 80038ae:	4614      	mov	r4, r2
 80038b0:	4698      	mov	r8, r3
 80038b2:	4606      	mov	r6, r0
 80038b4:	b09d      	sub	sp, #116	; 0x74
 80038b6:	b118      	cbz	r0, 80038c0 <_vfiprintf_r+0x18>
 80038b8:	6983      	ldr	r3, [r0, #24]
 80038ba:	b90b      	cbnz	r3, 80038c0 <_vfiprintf_r+0x18>
 80038bc:	f7ff fe98 	bl	80035f0 <__sinit>
 80038c0:	4b89      	ldr	r3, [pc, #548]	; (8003ae8 <_vfiprintf_r+0x240>)
 80038c2:	429d      	cmp	r5, r3
 80038c4:	d11b      	bne.n	80038fe <_vfiprintf_r+0x56>
 80038c6:	6875      	ldr	r5, [r6, #4]
 80038c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ca:	07d9      	lsls	r1, r3, #31
 80038cc:	d405      	bmi.n	80038da <_vfiprintf_r+0x32>
 80038ce:	89ab      	ldrh	r3, [r5, #12]
 80038d0:	059a      	lsls	r2, r3, #22
 80038d2:	d402      	bmi.n	80038da <_vfiprintf_r+0x32>
 80038d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038d6:	f7ff ff29 	bl	800372c <__retarget_lock_acquire_recursive>
 80038da:	89ab      	ldrh	r3, [r5, #12]
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	d501      	bpl.n	80038e4 <_vfiprintf_r+0x3c>
 80038e0:	692b      	ldr	r3, [r5, #16]
 80038e2:	b9eb      	cbnz	r3, 8003920 <_vfiprintf_r+0x78>
 80038e4:	4629      	mov	r1, r5
 80038e6:	4630      	mov	r0, r6
 80038e8:	f000 fb5c 	bl	8003fa4 <__swsetup_r>
 80038ec:	b1c0      	cbz	r0, 8003920 <_vfiprintf_r+0x78>
 80038ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038f0:	07dc      	lsls	r4, r3, #31
 80038f2:	d50e      	bpl.n	8003912 <_vfiprintf_r+0x6a>
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	b01d      	add	sp, #116	; 0x74
 80038fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fe:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <_vfiprintf_r+0x244>)
 8003900:	429d      	cmp	r5, r3
 8003902:	d101      	bne.n	8003908 <_vfiprintf_r+0x60>
 8003904:	68b5      	ldr	r5, [r6, #8]
 8003906:	e7df      	b.n	80038c8 <_vfiprintf_r+0x20>
 8003908:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <_vfiprintf_r+0x248>)
 800390a:	429d      	cmp	r5, r3
 800390c:	bf08      	it	eq
 800390e:	68f5      	ldreq	r5, [r6, #12]
 8003910:	e7da      	b.n	80038c8 <_vfiprintf_r+0x20>
 8003912:	89ab      	ldrh	r3, [r5, #12]
 8003914:	0598      	lsls	r0, r3, #22
 8003916:	d4ed      	bmi.n	80038f4 <_vfiprintf_r+0x4c>
 8003918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800391a:	f7ff ff08 	bl	800372e <__retarget_lock_release_recursive>
 800391e:	e7e9      	b.n	80038f4 <_vfiprintf_r+0x4c>
 8003920:	2300      	movs	r3, #0
 8003922:	9309      	str	r3, [sp, #36]	; 0x24
 8003924:	2320      	movs	r3, #32
 8003926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800392a:	2330      	movs	r3, #48	; 0x30
 800392c:	f04f 0901 	mov.w	r9, #1
 8003930:	f8cd 800c 	str.w	r8, [sp, #12]
 8003934:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003af4 <_vfiprintf_r+0x24c>
 8003938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800393c:	4623      	mov	r3, r4
 800393e:	469a      	mov	sl, r3
 8003940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003944:	b10a      	cbz	r2, 800394a <_vfiprintf_r+0xa2>
 8003946:	2a25      	cmp	r2, #37	; 0x25
 8003948:	d1f9      	bne.n	800393e <_vfiprintf_r+0x96>
 800394a:	ebba 0b04 	subs.w	fp, sl, r4
 800394e:	d00b      	beq.n	8003968 <_vfiprintf_r+0xc0>
 8003950:	465b      	mov	r3, fp
 8003952:	4622      	mov	r2, r4
 8003954:	4629      	mov	r1, r5
 8003956:	4630      	mov	r0, r6
 8003958:	f7ff ff93 	bl	8003882 <__sfputs_r>
 800395c:	3001      	adds	r0, #1
 800395e:	f000 80aa 	beq.w	8003ab6 <_vfiprintf_r+0x20e>
 8003962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003964:	445a      	add	r2, fp
 8003966:	9209      	str	r2, [sp, #36]	; 0x24
 8003968:	f89a 3000 	ldrb.w	r3, [sl]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a2 	beq.w	8003ab6 <_vfiprintf_r+0x20e>
 8003972:	2300      	movs	r3, #0
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800397c:	f10a 0a01 	add.w	sl, sl, #1
 8003980:	9304      	str	r3, [sp, #16]
 8003982:	9307      	str	r3, [sp, #28]
 8003984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003988:	931a      	str	r3, [sp, #104]	; 0x68
 800398a:	4654      	mov	r4, sl
 800398c:	2205      	movs	r2, #5
 800398e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003992:	4858      	ldr	r0, [pc, #352]	; (8003af4 <_vfiprintf_r+0x24c>)
 8003994:	f000 fcba 	bl	800430c <memchr>
 8003998:	9a04      	ldr	r2, [sp, #16]
 800399a:	b9d8      	cbnz	r0, 80039d4 <_vfiprintf_r+0x12c>
 800399c:	06d1      	lsls	r1, r2, #27
 800399e:	bf44      	itt	mi
 80039a0:	2320      	movmi	r3, #32
 80039a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a6:	0713      	lsls	r3, r2, #28
 80039a8:	bf44      	itt	mi
 80039aa:	232b      	movmi	r3, #43	; 0x2b
 80039ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b0:	f89a 3000 	ldrb.w	r3, [sl]
 80039b4:	2b2a      	cmp	r3, #42	; 0x2a
 80039b6:	d015      	beq.n	80039e4 <_vfiprintf_r+0x13c>
 80039b8:	4654      	mov	r4, sl
 80039ba:	2000      	movs	r0, #0
 80039bc:	f04f 0c0a 	mov.w	ip, #10
 80039c0:	9a07      	ldr	r2, [sp, #28]
 80039c2:	4621      	mov	r1, r4
 80039c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039c8:	3b30      	subs	r3, #48	; 0x30
 80039ca:	2b09      	cmp	r3, #9
 80039cc:	d94e      	bls.n	8003a6c <_vfiprintf_r+0x1c4>
 80039ce:	b1b0      	cbz	r0, 80039fe <_vfiprintf_r+0x156>
 80039d0:	9207      	str	r2, [sp, #28]
 80039d2:	e014      	b.n	80039fe <_vfiprintf_r+0x156>
 80039d4:	eba0 0308 	sub.w	r3, r0, r8
 80039d8:	fa09 f303 	lsl.w	r3, r9, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	46a2      	mov	sl, r4
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	e7d2      	b.n	800398a <_vfiprintf_r+0xe2>
 80039e4:	9b03      	ldr	r3, [sp, #12]
 80039e6:	1d19      	adds	r1, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	9103      	str	r1, [sp, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bfbb      	ittet	lt
 80039f0:	425b      	neglt	r3, r3
 80039f2:	f042 0202 	orrlt.w	r2, r2, #2
 80039f6:	9307      	strge	r3, [sp, #28]
 80039f8:	9307      	strlt	r3, [sp, #28]
 80039fa:	bfb8      	it	lt
 80039fc:	9204      	strlt	r2, [sp, #16]
 80039fe:	7823      	ldrb	r3, [r4, #0]
 8003a00:	2b2e      	cmp	r3, #46	; 0x2e
 8003a02:	d10c      	bne.n	8003a1e <_vfiprintf_r+0x176>
 8003a04:	7863      	ldrb	r3, [r4, #1]
 8003a06:	2b2a      	cmp	r3, #42	; 0x2a
 8003a08:	d135      	bne.n	8003a76 <_vfiprintf_r+0x1ce>
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	3402      	adds	r4, #2
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	9203      	str	r2, [sp, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bfb8      	it	lt
 8003a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a1c:	9305      	str	r3, [sp, #20]
 8003a1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003af8 <_vfiprintf_r+0x250>
 8003a22:	2203      	movs	r2, #3
 8003a24:	4650      	mov	r0, sl
 8003a26:	7821      	ldrb	r1, [r4, #0]
 8003a28:	f000 fc70 	bl	800430c <memchr>
 8003a2c:	b140      	cbz	r0, 8003a40 <_vfiprintf_r+0x198>
 8003a2e:	2340      	movs	r3, #64	; 0x40
 8003a30:	eba0 000a 	sub.w	r0, r0, sl
 8003a34:	fa03 f000 	lsl.w	r0, r3, r0
 8003a38:	9b04      	ldr	r3, [sp, #16]
 8003a3a:	3401      	adds	r4, #1
 8003a3c:	4303      	orrs	r3, r0
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a44:	2206      	movs	r2, #6
 8003a46:	482d      	ldr	r0, [pc, #180]	; (8003afc <_vfiprintf_r+0x254>)
 8003a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a4c:	f000 fc5e 	bl	800430c <memchr>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d03f      	beq.n	8003ad4 <_vfiprintf_r+0x22c>
 8003a54:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <_vfiprintf_r+0x258>)
 8003a56:	bb1b      	cbnz	r3, 8003aa0 <_vfiprintf_r+0x1f8>
 8003a58:	9b03      	ldr	r3, [sp, #12]
 8003a5a:	3307      	adds	r3, #7
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	3308      	adds	r3, #8
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a66:	443b      	add	r3, r7
 8003a68:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6a:	e767      	b.n	800393c <_vfiprintf_r+0x94>
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	2001      	movs	r0, #1
 8003a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a74:	e7a5      	b.n	80039c2 <_vfiprintf_r+0x11a>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f04f 0c0a 	mov.w	ip, #10
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	3401      	adds	r4, #1
 8003a80:	9305      	str	r3, [sp, #20]
 8003a82:	4620      	mov	r0, r4
 8003a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a88:	3a30      	subs	r2, #48	; 0x30
 8003a8a:	2a09      	cmp	r2, #9
 8003a8c:	d903      	bls.n	8003a96 <_vfiprintf_r+0x1ee>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0c5      	beq.n	8003a1e <_vfiprintf_r+0x176>
 8003a92:	9105      	str	r1, [sp, #20]
 8003a94:	e7c3      	b.n	8003a1e <_vfiprintf_r+0x176>
 8003a96:	4604      	mov	r4, r0
 8003a98:	2301      	movs	r3, #1
 8003a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a9e:	e7f0      	b.n	8003a82 <_vfiprintf_r+0x1da>
 8003aa0:	ab03      	add	r3, sp, #12
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <_vfiprintf_r+0x25c>)
 8003aaa:	a904      	add	r1, sp, #16
 8003aac:	f3af 8000 	nop.w
 8003ab0:	4607      	mov	r7, r0
 8003ab2:	1c78      	adds	r0, r7, #1
 8003ab4:	d1d6      	bne.n	8003a64 <_vfiprintf_r+0x1bc>
 8003ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ab8:	07d9      	lsls	r1, r3, #31
 8003aba:	d405      	bmi.n	8003ac8 <_vfiprintf_r+0x220>
 8003abc:	89ab      	ldrh	r3, [r5, #12]
 8003abe:	059a      	lsls	r2, r3, #22
 8003ac0:	d402      	bmi.n	8003ac8 <_vfiprintf_r+0x220>
 8003ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ac4:	f7ff fe33 	bl	800372e <__retarget_lock_release_recursive>
 8003ac8:	89ab      	ldrh	r3, [r5, #12]
 8003aca:	065b      	lsls	r3, r3, #25
 8003acc:	f53f af12 	bmi.w	80038f4 <_vfiprintf_r+0x4c>
 8003ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ad2:	e711      	b.n	80038f8 <_vfiprintf_r+0x50>
 8003ad4:	ab03      	add	r3, sp, #12
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4630      	mov	r0, r6
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <_vfiprintf_r+0x25c>)
 8003ade:	a904      	add	r1, sp, #16
 8003ae0:	f000 f882 	bl	8003be8 <_printf_i>
 8003ae4:	e7e4      	b.n	8003ab0 <_vfiprintf_r+0x208>
 8003ae6:	bf00      	nop
 8003ae8:	080044ac 	.word	0x080044ac
 8003aec:	080044cc 	.word	0x080044cc
 8003af0:	0800448c 	.word	0x0800448c
 8003af4:	080044ec 	.word	0x080044ec
 8003af8:	080044f2 	.word	0x080044f2
 8003afc:	080044f6 	.word	0x080044f6
 8003b00:	00000000 	.word	0x00000000
 8003b04:	08003883 	.word	0x08003883

08003b08 <_printf_common>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	4699      	mov	r9, r3
 8003b10:	688a      	ldr	r2, [r1, #8]
 8003b12:	690b      	ldr	r3, [r1, #16]
 8003b14:	4607      	mov	r7, r0
 8003b16:	4293      	cmp	r3, r2
 8003b18:	bfb8      	it	lt
 8003b1a:	4613      	movlt	r3, r2
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b22:	460c      	mov	r4, r1
 8003b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b28:	b10a      	cbz	r2, 8003b2e <_printf_common+0x26>
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	0699      	lsls	r1, r3, #26
 8003b32:	bf42      	ittt	mi
 8003b34:	6833      	ldrmi	r3, [r6, #0]
 8003b36:	3302      	addmi	r3, #2
 8003b38:	6033      	strmi	r3, [r6, #0]
 8003b3a:	6825      	ldr	r5, [r4, #0]
 8003b3c:	f015 0506 	ands.w	r5, r5, #6
 8003b40:	d106      	bne.n	8003b50 <_printf_common+0x48>
 8003b42:	f104 0a19 	add.w	sl, r4, #25
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	6832      	ldr	r2, [r6, #0]
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dc28      	bgt.n	8003ba2 <_printf_common+0x9a>
 8003b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b54:	1e13      	subs	r3, r2, #0
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	bf18      	it	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	0692      	lsls	r2, r2, #26
 8003b5e:	d42d      	bmi.n	8003bbc <_printf_common+0xb4>
 8003b60:	4649      	mov	r1, r9
 8003b62:	4638      	mov	r0, r7
 8003b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b68:	47c0      	blx	r8
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d020      	beq.n	8003bb0 <_printf_common+0xa8>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	68e5      	ldr	r5, [r4, #12]
 8003b72:	f003 0306 	and.w	r3, r3, #6
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	bf18      	it	ne
 8003b7a:	2500      	movne	r5, #0
 8003b7c:	6832      	ldr	r2, [r6, #0]
 8003b7e:	f04f 0600 	mov.w	r6, #0
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	bf08      	it	eq
 8003b86:	1aad      	subeq	r5, r5, r2
 8003b88:	6922      	ldr	r2, [r4, #16]
 8003b8a:	bf08      	it	eq
 8003b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bfc4      	itt	gt
 8003b94:	1a9b      	subgt	r3, r3, r2
 8003b96:	18ed      	addgt	r5, r5, r3
 8003b98:	341a      	adds	r4, #26
 8003b9a:	42b5      	cmp	r5, r6
 8003b9c:	d11a      	bne.n	8003bd4 <_printf_common+0xcc>
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e008      	b.n	8003bb4 <_printf_common+0xac>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4652      	mov	r2, sl
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	4638      	mov	r0, r7
 8003baa:	47c0      	blx	r8
 8003bac:	3001      	adds	r0, #1
 8003bae:	d103      	bne.n	8003bb8 <_printf_common+0xb0>
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb8:	3501      	adds	r5, #1
 8003bba:	e7c4      	b.n	8003b46 <_printf_common+0x3e>
 8003bbc:	2030      	movs	r0, #48	; 0x30
 8003bbe:	18e1      	adds	r1, r4, r3
 8003bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bca:	4422      	add	r2, r4
 8003bcc:	3302      	adds	r3, #2
 8003bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bd2:	e7c5      	b.n	8003b60 <_printf_common+0x58>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	4649      	mov	r1, r9
 8003bda:	4638      	mov	r0, r7
 8003bdc:	47c0      	blx	r8
 8003bde:	3001      	adds	r0, #1
 8003be0:	d0e6      	beq.n	8003bb0 <_printf_common+0xa8>
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7d9      	b.n	8003b9a <_printf_common+0x92>
	...

08003be8 <_printf_i>:
 8003be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	7e0f      	ldrb	r7, [r1, #24]
 8003bee:	4691      	mov	r9, r2
 8003bf0:	2f78      	cmp	r7, #120	; 0x78
 8003bf2:	4680      	mov	r8, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bfe:	d807      	bhi.n	8003c10 <_printf_i+0x28>
 8003c00:	2f62      	cmp	r7, #98	; 0x62
 8003c02:	d80a      	bhi.n	8003c1a <_printf_i+0x32>
 8003c04:	2f00      	cmp	r7, #0
 8003c06:	f000 80d9 	beq.w	8003dbc <_printf_i+0x1d4>
 8003c0a:	2f58      	cmp	r7, #88	; 0x58
 8003c0c:	f000 80a4 	beq.w	8003d58 <_printf_i+0x170>
 8003c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c18:	e03a      	b.n	8003c90 <_printf_i+0xa8>
 8003c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c1e:	2b15      	cmp	r3, #21
 8003c20:	d8f6      	bhi.n	8003c10 <_printf_i+0x28>
 8003c22:	a101      	add	r1, pc, #4	; (adr r1, 8003c28 <_printf_i+0x40>)
 8003c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c28:	08003c81 	.word	0x08003c81
 8003c2c:	08003c95 	.word	0x08003c95
 8003c30:	08003c11 	.word	0x08003c11
 8003c34:	08003c11 	.word	0x08003c11
 8003c38:	08003c11 	.word	0x08003c11
 8003c3c:	08003c11 	.word	0x08003c11
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003c11 	.word	0x08003c11
 8003c48:	08003c11 	.word	0x08003c11
 8003c4c:	08003c11 	.word	0x08003c11
 8003c50:	08003c11 	.word	0x08003c11
 8003c54:	08003da3 	.word	0x08003da3
 8003c58:	08003cc5 	.word	0x08003cc5
 8003c5c:	08003d85 	.word	0x08003d85
 8003c60:	08003c11 	.word	0x08003c11
 8003c64:	08003c11 	.word	0x08003c11
 8003c68:	08003dc5 	.word	0x08003dc5
 8003c6c:	08003c11 	.word	0x08003c11
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003c11 	.word	0x08003c11
 8003c78:	08003c11 	.word	0x08003c11
 8003c7c:	08003d8d 	.word	0x08003d8d
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	602a      	str	r2, [r5, #0]
 8003c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0a4      	b.n	8003dde <_printf_i+0x1f6>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	6829      	ldr	r1, [r5, #0]
 8003c98:	0606      	lsls	r6, r0, #24
 8003c9a:	f101 0304 	add.w	r3, r1, #4
 8003c9e:	d50a      	bpl.n	8003cb6 <_printf_i+0xce>
 8003ca0:	680e      	ldr	r6, [r1, #0]
 8003ca2:	602b      	str	r3, [r5, #0]
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	da03      	bge.n	8003cb0 <_printf_i+0xc8>
 8003ca8:	232d      	movs	r3, #45	; 0x2d
 8003caa:	4276      	negs	r6, r6
 8003cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb0:	230a      	movs	r3, #10
 8003cb2:	485e      	ldr	r0, [pc, #376]	; (8003e2c <_printf_i+0x244>)
 8003cb4:	e019      	b.n	8003cea <_printf_i+0x102>
 8003cb6:	680e      	ldr	r6, [r1, #0]
 8003cb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	bf18      	it	ne
 8003cc0:	b236      	sxthne	r6, r6
 8003cc2:	e7ef      	b.n	8003ca4 <_printf_i+0xbc>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	1d19      	adds	r1, r3, #4
 8003cca:	6029      	str	r1, [r5, #0]
 8003ccc:	0601      	lsls	r1, r0, #24
 8003cce:	d501      	bpl.n	8003cd4 <_printf_i+0xec>
 8003cd0:	681e      	ldr	r6, [r3, #0]
 8003cd2:	e002      	b.n	8003cda <_printf_i+0xf2>
 8003cd4:	0646      	lsls	r6, r0, #25
 8003cd6:	d5fb      	bpl.n	8003cd0 <_printf_i+0xe8>
 8003cd8:	881e      	ldrh	r6, [r3, #0]
 8003cda:	2f6f      	cmp	r7, #111	; 0x6f
 8003cdc:	bf0c      	ite	eq
 8003cde:	2308      	moveq	r3, #8
 8003ce0:	230a      	movne	r3, #10
 8003ce2:	4852      	ldr	r0, [pc, #328]	; (8003e2c <_printf_i+0x244>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cea:	6865      	ldr	r5, [r4, #4]
 8003cec:	2d00      	cmp	r5, #0
 8003cee:	bfa8      	it	ge
 8003cf0:	6821      	ldrge	r1, [r4, #0]
 8003cf2:	60a5      	str	r5, [r4, #8]
 8003cf4:	bfa4      	itt	ge
 8003cf6:	f021 0104 	bicge.w	r1, r1, #4
 8003cfa:	6021      	strge	r1, [r4, #0]
 8003cfc:	b90e      	cbnz	r6, 8003d02 <_printf_i+0x11a>
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	d04d      	beq.n	8003d9e <_printf_i+0x1b6>
 8003d02:	4615      	mov	r5, r2
 8003d04:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d08:	fb03 6711 	mls	r7, r3, r1, r6
 8003d0c:	5dc7      	ldrb	r7, [r0, r7]
 8003d0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d12:	4637      	mov	r7, r6
 8003d14:	42bb      	cmp	r3, r7
 8003d16:	460e      	mov	r6, r1
 8003d18:	d9f4      	bls.n	8003d04 <_printf_i+0x11c>
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d10b      	bne.n	8003d36 <_printf_i+0x14e>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	07de      	lsls	r6, r3, #31
 8003d22:	d508      	bpl.n	8003d36 <_printf_i+0x14e>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	6861      	ldr	r1, [r4, #4]
 8003d28:	4299      	cmp	r1, r3
 8003d2a:	bfde      	ittt	le
 8003d2c:	2330      	movle	r3, #48	; 0x30
 8003d2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d36:	1b52      	subs	r2, r2, r5
 8003d38:	6122      	str	r2, [r4, #16]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4640      	mov	r0, r8
 8003d40:	f8cd a000 	str.w	sl, [sp]
 8003d44:	aa03      	add	r2, sp, #12
 8003d46:	f7ff fedf 	bl	8003b08 <_printf_common>
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d14c      	bne.n	8003de8 <_printf_i+0x200>
 8003d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d52:	b004      	add	sp, #16
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	4834      	ldr	r0, [pc, #208]	; (8003e2c <_printf_i+0x244>)
 8003d5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d5e:	6829      	ldr	r1, [r5, #0]
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d66:	6029      	str	r1, [r5, #0]
 8003d68:	061d      	lsls	r5, r3, #24
 8003d6a:	d514      	bpl.n	8003d96 <_printf_i+0x1ae>
 8003d6c:	07df      	lsls	r7, r3, #31
 8003d6e:	bf44      	itt	mi
 8003d70:	f043 0320 	orrmi.w	r3, r3, #32
 8003d74:	6023      	strmi	r3, [r4, #0]
 8003d76:	b91e      	cbnz	r6, 8003d80 <_printf_i+0x198>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	f023 0320 	bic.w	r3, r3, #32
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	2310      	movs	r3, #16
 8003d82:	e7af      	b.n	8003ce4 <_printf_i+0xfc>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	f043 0320 	orr.w	r3, r3, #32
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	2378      	movs	r3, #120	; 0x78
 8003d8e:	4828      	ldr	r0, [pc, #160]	; (8003e30 <_printf_i+0x248>)
 8003d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d94:	e7e3      	b.n	8003d5e <_printf_i+0x176>
 8003d96:	0659      	lsls	r1, r3, #25
 8003d98:	bf48      	it	mi
 8003d9a:	b2b6      	uxthmi	r6, r6
 8003d9c:	e7e6      	b.n	8003d6c <_printf_i+0x184>
 8003d9e:	4615      	mov	r5, r2
 8003da0:	e7bb      	b.n	8003d1a <_printf_i+0x132>
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	6826      	ldr	r6, [r4, #0]
 8003da6:	1d18      	adds	r0, r3, #4
 8003da8:	6961      	ldr	r1, [r4, #20]
 8003daa:	6028      	str	r0, [r5, #0]
 8003dac:	0635      	lsls	r5, r6, #24
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	d501      	bpl.n	8003db6 <_printf_i+0x1ce>
 8003db2:	6019      	str	r1, [r3, #0]
 8003db4:	e002      	b.n	8003dbc <_printf_i+0x1d4>
 8003db6:	0670      	lsls	r0, r6, #25
 8003db8:	d5fb      	bpl.n	8003db2 <_printf_i+0x1ca>
 8003dba:	8019      	strh	r1, [r3, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4615      	mov	r5, r2
 8003dc0:	6123      	str	r3, [r4, #16]
 8003dc2:	e7ba      	b.n	8003d3a <_printf_i+0x152>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	1d1a      	adds	r2, r3, #4
 8003dca:	602a      	str	r2, [r5, #0]
 8003dcc:	681d      	ldr	r5, [r3, #0]
 8003dce:	6862      	ldr	r2, [r4, #4]
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 fa9b 	bl	800430c <memchr>
 8003dd6:	b108      	cbz	r0, 8003ddc <_printf_i+0x1f4>
 8003dd8:	1b40      	subs	r0, r0, r5
 8003dda:	6060      	str	r0, [r4, #4]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	2300      	movs	r3, #0
 8003de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de6:	e7a8      	b.n	8003d3a <_printf_i+0x152>
 8003de8:	462a      	mov	r2, r5
 8003dea:	4649      	mov	r1, r9
 8003dec:	4640      	mov	r0, r8
 8003dee:	6923      	ldr	r3, [r4, #16]
 8003df0:	47d0      	blx	sl
 8003df2:	3001      	adds	r0, #1
 8003df4:	d0ab      	beq.n	8003d4e <_printf_i+0x166>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	079b      	lsls	r3, r3, #30
 8003dfa:	d413      	bmi.n	8003e24 <_printf_i+0x23c>
 8003dfc:	68e0      	ldr	r0, [r4, #12]
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	4298      	cmp	r0, r3
 8003e02:	bfb8      	it	lt
 8003e04:	4618      	movlt	r0, r3
 8003e06:	e7a4      	b.n	8003d52 <_printf_i+0x16a>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	4640      	mov	r0, r8
 8003e10:	47d0      	blx	sl
 8003e12:	3001      	adds	r0, #1
 8003e14:	d09b      	beq.n	8003d4e <_printf_i+0x166>
 8003e16:	3501      	adds	r5, #1
 8003e18:	68e3      	ldr	r3, [r4, #12]
 8003e1a:	9903      	ldr	r1, [sp, #12]
 8003e1c:	1a5b      	subs	r3, r3, r1
 8003e1e:	42ab      	cmp	r3, r5
 8003e20:	dcf2      	bgt.n	8003e08 <_printf_i+0x220>
 8003e22:	e7eb      	b.n	8003dfc <_printf_i+0x214>
 8003e24:	2500      	movs	r5, #0
 8003e26:	f104 0619 	add.w	r6, r4, #25
 8003e2a:	e7f5      	b.n	8003e18 <_printf_i+0x230>
 8003e2c:	080044fd 	.word	0x080044fd
 8003e30:	0800450e 	.word	0x0800450e

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	2300      	movs	r3, #0
 8003e38:	4d05      	ldr	r5, [pc, #20]	; (8003e50 <_sbrk_r+0x1c>)
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fc fbac 	bl	800059c <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	200001c0 	.word	0x200001c0

08003e54 <__sread>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	460c      	mov	r4, r1
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	f000 fab8 	bl	80043d0 <_read_r>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	bfab      	itete	ge
 8003e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e66:	89a3      	ldrhlt	r3, [r4, #12]
 8003e68:	181b      	addge	r3, r3, r0
 8003e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e6e:	bfac      	ite	ge
 8003e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e72:	81a3      	strhlt	r3, [r4, #12]
 8003e74:	bd10      	pop	{r4, pc}

08003e76 <__swrite>:
 8003e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	898b      	ldrh	r3, [r1, #12]
 8003e7e:	4605      	mov	r5, r0
 8003e80:	05db      	lsls	r3, r3, #23
 8003e82:	460c      	mov	r4, r1
 8003e84:	4616      	mov	r6, r2
 8003e86:	d505      	bpl.n	8003e94 <__swrite+0x1e>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e90:	f000 f9c4 	bl	800421c <_lseek_r>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	4632      	mov	r2, r6
 8003e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e9c:	81a3      	strh	r3, [r4, #12]
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eaa:	f000 b869 	b.w	8003f80 <_write_r>

08003eae <__sseek>:
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb6:	f000 f9b1 	bl	800421c <_lseek_r>
 8003eba:	1c43      	adds	r3, r0, #1
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	bf15      	itete	ne
 8003ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eca:	81a3      	strheq	r3, [r4, #12]
 8003ecc:	bf18      	it	ne
 8003ece:	81a3      	strhne	r3, [r4, #12]
 8003ed0:	bd10      	pop	{r4, pc}

08003ed2 <__sclose>:
 8003ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed6:	f000 b8d3 	b.w	8004080 <_close_r>
	...

08003edc <__swbuf_r>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	460e      	mov	r6, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	b118      	cbz	r0, 8003eee <__swbuf_r+0x12>
 8003ee6:	6983      	ldr	r3, [r0, #24]
 8003ee8:	b90b      	cbnz	r3, 8003eee <__swbuf_r+0x12>
 8003eea:	f7ff fb81 	bl	80035f0 <__sinit>
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <__swbuf_r+0x98>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d12b      	bne.n	8003f4c <__swbuf_r+0x70>
 8003ef4:	686c      	ldr	r4, [r5, #4]
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	071a      	lsls	r2, r3, #28
 8003efe:	d52f      	bpl.n	8003f60 <__swbuf_r+0x84>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	b36b      	cbz	r3, 8003f60 <__swbuf_r+0x84>
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	b2f6      	uxtb	r6, r6
 8003f0a:	1ac0      	subs	r0, r0, r3
 8003f0c:	6963      	ldr	r3, [r4, #20]
 8003f0e:	4637      	mov	r7, r6
 8003f10:	4283      	cmp	r3, r0
 8003f12:	dc04      	bgt.n	8003f1e <__swbuf_r+0x42>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f944 	bl	80041a4 <_fflush_r>
 8003f1c:	bb30      	cbnz	r0, 8003f6c <__swbuf_r+0x90>
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	3001      	adds	r0, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	6022      	str	r2, [r4, #0]
 8003f2c:	701e      	strb	r6, [r3, #0]
 8003f2e:	6963      	ldr	r3, [r4, #20]
 8003f30:	4283      	cmp	r3, r0
 8003f32:	d004      	beq.n	8003f3e <__swbuf_r+0x62>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	07db      	lsls	r3, r3, #31
 8003f38:	d506      	bpl.n	8003f48 <__swbuf_r+0x6c>
 8003f3a:	2e0a      	cmp	r6, #10
 8003f3c:	d104      	bne.n	8003f48 <__swbuf_r+0x6c>
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f92f 	bl	80041a4 <_fflush_r>
 8003f46:	b988      	cbnz	r0, 8003f6c <__swbuf_r+0x90>
 8003f48:	4638      	mov	r0, r7
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <__swbuf_r+0x9c>)
 8003f4e:	429c      	cmp	r4, r3
 8003f50:	d101      	bne.n	8003f56 <__swbuf_r+0x7a>
 8003f52:	68ac      	ldr	r4, [r5, #8]
 8003f54:	e7cf      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <__swbuf_r+0xa0>)
 8003f58:	429c      	cmp	r4, r3
 8003f5a:	bf08      	it	eq
 8003f5c:	68ec      	ldreq	r4, [r5, #12]
 8003f5e:	e7ca      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 f81e 	bl	8003fa4 <__swsetup_r>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d0cb      	beq.n	8003f04 <__swbuf_r+0x28>
 8003f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f70:	e7ea      	b.n	8003f48 <__swbuf_r+0x6c>
 8003f72:	bf00      	nop
 8003f74:	080044ac 	.word	0x080044ac
 8003f78:	080044cc 	.word	0x080044cc
 8003f7c:	0800448c 	.word	0x0800448c

08003f80 <_write_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4d05      	ldr	r5, [pc, #20]	; (8003fa0 <_write_r+0x20>)
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc fab7 	bl	8000502 <_write>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_write_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_write_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200001c0 	.word	0x200001c0

08003fa4 <__swsetup_r>:
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <__swsetup_r+0xcc>)
 8003fa6:	b570      	push	{r4, r5, r6, lr}
 8003fa8:	681d      	ldr	r5, [r3, #0]
 8003faa:	4606      	mov	r6, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	b125      	cbz	r5, 8003fba <__swsetup_r+0x16>
 8003fb0:	69ab      	ldr	r3, [r5, #24]
 8003fb2:	b913      	cbnz	r3, 8003fba <__swsetup_r+0x16>
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f7ff fb1b 	bl	80035f0 <__sinit>
 8003fba:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <__swsetup_r+0xd0>)
 8003fbc:	429c      	cmp	r4, r3
 8003fbe:	d10f      	bne.n	8003fe0 <__swsetup_r+0x3c>
 8003fc0:	686c      	ldr	r4, [r5, #4]
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fc8:	0719      	lsls	r1, r3, #28
 8003fca:	d42c      	bmi.n	8004026 <__swsetup_r+0x82>
 8003fcc:	06dd      	lsls	r5, r3, #27
 8003fce:	d411      	bmi.n	8003ff4 <__swsetup_r+0x50>
 8003fd0:	2309      	movs	r3, #9
 8003fd2:	6033      	str	r3, [r6, #0]
 8003fd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e03e      	b.n	800405e <__swsetup_r+0xba>
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <__swsetup_r+0xd4>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d101      	bne.n	8003fea <__swsetup_r+0x46>
 8003fe6:	68ac      	ldr	r4, [r5, #8]
 8003fe8:	e7eb      	b.n	8003fc2 <__swsetup_r+0x1e>
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <__swsetup_r+0xd8>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	bf08      	it	eq
 8003ff0:	68ec      	ldreq	r4, [r5, #12]
 8003ff2:	e7e6      	b.n	8003fc2 <__swsetup_r+0x1e>
 8003ff4:	0758      	lsls	r0, r3, #29
 8003ff6:	d512      	bpl.n	800401e <__swsetup_r+0x7a>
 8003ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ffa:	b141      	cbz	r1, 800400e <__swsetup_r+0x6a>
 8003ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004000:	4299      	cmp	r1, r3
 8004002:	d002      	beq.n	800400a <__swsetup_r+0x66>
 8004004:	4630      	mov	r0, r6
 8004006:	f000 f99b 	bl	8004340 <_free_r>
 800400a:	2300      	movs	r3, #0
 800400c:	6363      	str	r3, [r4, #52]	; 0x34
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	2300      	movs	r3, #0
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f043 0308 	orr.w	r3, r3, #8
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	b94b      	cbnz	r3, 800403e <__swsetup_r+0x9a>
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d003      	beq.n	800403e <__swsetup_r+0x9a>
 8004036:	4621      	mov	r1, r4
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f927 	bl	800428c <__smakebuf_r>
 800403e:	89a0      	ldrh	r0, [r4, #12]
 8004040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004044:	f010 0301 	ands.w	r3, r0, #1
 8004048:	d00a      	beq.n	8004060 <__swsetup_r+0xbc>
 800404a:	2300      	movs	r3, #0
 800404c:	60a3      	str	r3, [r4, #8]
 800404e:	6963      	ldr	r3, [r4, #20]
 8004050:	425b      	negs	r3, r3
 8004052:	61a3      	str	r3, [r4, #24]
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	b943      	cbnz	r3, 800406a <__swsetup_r+0xc6>
 8004058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800405c:	d1ba      	bne.n	8003fd4 <__swsetup_r+0x30>
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	0781      	lsls	r1, r0, #30
 8004062:	bf58      	it	pl
 8004064:	6963      	ldrpl	r3, [r4, #20]
 8004066:	60a3      	str	r3, [r4, #8]
 8004068:	e7f4      	b.n	8004054 <__swsetup_r+0xb0>
 800406a:	2000      	movs	r0, #0
 800406c:	e7f7      	b.n	800405e <__swsetup_r+0xba>
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c
 8004074:	080044ac 	.word	0x080044ac
 8004078:	080044cc 	.word	0x080044cc
 800407c:	0800448c 	.word	0x0800448c

08004080 <_close_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	; (800409c <_close_r+0x1c>)
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fa55 	bl	800053a <_close>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_close_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_close_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200001c0 	.word	0x200001c0

080040a0 <__sflush_r>:
 80040a0:	898a      	ldrh	r2, [r1, #12]
 80040a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a4:	4605      	mov	r5, r0
 80040a6:	0710      	lsls	r0, r2, #28
 80040a8:	460c      	mov	r4, r1
 80040aa:	d457      	bmi.n	800415c <__sflush_r+0xbc>
 80040ac:	684b      	ldr	r3, [r1, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	dc04      	bgt.n	80040bc <__sflush_r+0x1c>
 80040b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dc01      	bgt.n	80040bc <__sflush_r+0x1c>
 80040b8:	2000      	movs	r0, #0
 80040ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040be:	2e00      	cmp	r6, #0
 80040c0:	d0fa      	beq.n	80040b8 <__sflush_r+0x18>
 80040c2:	2300      	movs	r3, #0
 80040c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040c8:	682f      	ldr	r7, [r5, #0]
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	d032      	beq.n	8004134 <__sflush_r+0x94>
 80040ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	075a      	lsls	r2, r3, #29
 80040d4:	d505      	bpl.n	80040e2 <__sflush_r+0x42>
 80040d6:	6863      	ldr	r3, [r4, #4]
 80040d8:	1ac0      	subs	r0, r0, r3
 80040da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040dc:	b10b      	cbz	r3, 80040e2 <__sflush_r+0x42>
 80040de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040e0:	1ac0      	subs	r0, r0, r3
 80040e2:	2300      	movs	r3, #0
 80040e4:	4602      	mov	r2, r0
 80040e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040e8:	4628      	mov	r0, r5
 80040ea:	6a21      	ldr	r1, [r4, #32]
 80040ec:	47b0      	blx	r6
 80040ee:	1c43      	adds	r3, r0, #1
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	d106      	bne.n	8004102 <__sflush_r+0x62>
 80040f4:	6829      	ldr	r1, [r5, #0]
 80040f6:	291d      	cmp	r1, #29
 80040f8:	d82c      	bhi.n	8004154 <__sflush_r+0xb4>
 80040fa:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <__sflush_r+0x100>)
 80040fc:	40ca      	lsrs	r2, r1
 80040fe:	07d6      	lsls	r6, r2, #31
 8004100:	d528      	bpl.n	8004154 <__sflush_r+0xb4>
 8004102:	2200      	movs	r2, #0
 8004104:	6062      	str	r2, [r4, #4]
 8004106:	6922      	ldr	r2, [r4, #16]
 8004108:	04d9      	lsls	r1, r3, #19
 800410a:	6022      	str	r2, [r4, #0]
 800410c:	d504      	bpl.n	8004118 <__sflush_r+0x78>
 800410e:	1c42      	adds	r2, r0, #1
 8004110:	d101      	bne.n	8004116 <__sflush_r+0x76>
 8004112:	682b      	ldr	r3, [r5, #0]
 8004114:	b903      	cbnz	r3, 8004118 <__sflush_r+0x78>
 8004116:	6560      	str	r0, [r4, #84]	; 0x54
 8004118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800411a:	602f      	str	r7, [r5, #0]
 800411c:	2900      	cmp	r1, #0
 800411e:	d0cb      	beq.n	80040b8 <__sflush_r+0x18>
 8004120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004124:	4299      	cmp	r1, r3
 8004126:	d002      	beq.n	800412e <__sflush_r+0x8e>
 8004128:	4628      	mov	r0, r5
 800412a:	f000 f909 	bl	8004340 <_free_r>
 800412e:	2000      	movs	r0, #0
 8004130:	6360      	str	r0, [r4, #52]	; 0x34
 8004132:	e7c2      	b.n	80040ba <__sflush_r+0x1a>
 8004134:	6a21      	ldr	r1, [r4, #32]
 8004136:	2301      	movs	r3, #1
 8004138:	4628      	mov	r0, r5
 800413a:	47b0      	blx	r6
 800413c:	1c41      	adds	r1, r0, #1
 800413e:	d1c7      	bne.n	80040d0 <__sflush_r+0x30>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0c4      	beq.n	80040d0 <__sflush_r+0x30>
 8004146:	2b1d      	cmp	r3, #29
 8004148:	d001      	beq.n	800414e <__sflush_r+0xae>
 800414a:	2b16      	cmp	r3, #22
 800414c:	d101      	bne.n	8004152 <__sflush_r+0xb2>
 800414e:	602f      	str	r7, [r5, #0]
 8004150:	e7b2      	b.n	80040b8 <__sflush_r+0x18>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	e7ae      	b.n	80040ba <__sflush_r+0x1a>
 800415c:	690f      	ldr	r7, [r1, #16]
 800415e:	2f00      	cmp	r7, #0
 8004160:	d0aa      	beq.n	80040b8 <__sflush_r+0x18>
 8004162:	0793      	lsls	r3, r2, #30
 8004164:	bf18      	it	ne
 8004166:	2300      	movne	r3, #0
 8004168:	680e      	ldr	r6, [r1, #0]
 800416a:	bf08      	it	eq
 800416c:	694b      	ldreq	r3, [r1, #20]
 800416e:	1bf6      	subs	r6, r6, r7
 8004170:	600f      	str	r7, [r1, #0]
 8004172:	608b      	str	r3, [r1, #8]
 8004174:	2e00      	cmp	r6, #0
 8004176:	dd9f      	ble.n	80040b8 <__sflush_r+0x18>
 8004178:	4633      	mov	r3, r6
 800417a:	463a      	mov	r2, r7
 800417c:	4628      	mov	r0, r5
 800417e:	6a21      	ldr	r1, [r4, #32]
 8004180:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004184:	47e0      	blx	ip
 8004186:	2800      	cmp	r0, #0
 8004188:	dc06      	bgt.n	8004198 <__sflush_r+0xf8>
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	e790      	b.n	80040ba <__sflush_r+0x1a>
 8004198:	4407      	add	r7, r0
 800419a:	1a36      	subs	r6, r6, r0
 800419c:	e7ea      	b.n	8004174 <__sflush_r+0xd4>
 800419e:	bf00      	nop
 80041a0:	20400001 	.word	0x20400001

080041a4 <_fflush_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	690b      	ldr	r3, [r1, #16]
 80041a8:	4605      	mov	r5, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	b913      	cbnz	r3, 80041b4 <_fflush_r+0x10>
 80041ae:	2500      	movs	r5, #0
 80041b0:	4628      	mov	r0, r5
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	b118      	cbz	r0, 80041be <_fflush_r+0x1a>
 80041b6:	6983      	ldr	r3, [r0, #24]
 80041b8:	b90b      	cbnz	r3, 80041be <_fflush_r+0x1a>
 80041ba:	f7ff fa19 	bl	80035f0 <__sinit>
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <_fflush_r+0x6c>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	d11b      	bne.n	80041fc <_fflush_r+0x58>
 80041c4:	686c      	ldr	r4, [r5, #4]
 80041c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <_fflush_r+0xa>
 80041ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041d0:	07d0      	lsls	r0, r2, #31
 80041d2:	d404      	bmi.n	80041de <_fflush_r+0x3a>
 80041d4:	0599      	lsls	r1, r3, #22
 80041d6:	d402      	bmi.n	80041de <_fflush_r+0x3a>
 80041d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041da:	f7ff faa7 	bl	800372c <__retarget_lock_acquire_recursive>
 80041de:	4628      	mov	r0, r5
 80041e0:	4621      	mov	r1, r4
 80041e2:	f7ff ff5d 	bl	80040a0 <__sflush_r>
 80041e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041e8:	4605      	mov	r5, r0
 80041ea:	07da      	lsls	r2, r3, #31
 80041ec:	d4e0      	bmi.n	80041b0 <_fflush_r+0xc>
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	059b      	lsls	r3, r3, #22
 80041f2:	d4dd      	bmi.n	80041b0 <_fflush_r+0xc>
 80041f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041f6:	f7ff fa9a 	bl	800372e <__retarget_lock_release_recursive>
 80041fa:	e7d9      	b.n	80041b0 <_fflush_r+0xc>
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <_fflush_r+0x70>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	d101      	bne.n	8004206 <_fflush_r+0x62>
 8004202:	68ac      	ldr	r4, [r5, #8]
 8004204:	e7df      	b.n	80041c6 <_fflush_r+0x22>
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <_fflush_r+0x74>)
 8004208:	429c      	cmp	r4, r3
 800420a:	bf08      	it	eq
 800420c:	68ec      	ldreq	r4, [r5, #12]
 800420e:	e7da      	b.n	80041c6 <_fflush_r+0x22>
 8004210:	080044ac 	.word	0x080044ac
 8004214:	080044cc 	.word	0x080044cc
 8004218:	0800448c 	.word	0x0800448c

0800421c <_lseek_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	2200      	movs	r2, #0
 8004226:	4d05      	ldr	r5, [pc, #20]	; (800423c <_lseek_r+0x20>)
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f7fc f9a9 	bl	8000582 <_lseek>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_lseek_r+0x1e>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_lseek_r+0x1e>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	200001c0 	.word	0x200001c0

08004240 <__swhatbuf_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	460e      	mov	r6, r1
 8004244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004248:	4614      	mov	r4, r2
 800424a:	2900      	cmp	r1, #0
 800424c:	461d      	mov	r5, r3
 800424e:	b096      	sub	sp, #88	; 0x58
 8004250:	da08      	bge.n	8004264 <__swhatbuf_r+0x24>
 8004252:	2200      	movs	r2, #0
 8004254:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004258:	602a      	str	r2, [r5, #0]
 800425a:	061a      	lsls	r2, r3, #24
 800425c:	d410      	bmi.n	8004280 <__swhatbuf_r+0x40>
 800425e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004262:	e00e      	b.n	8004282 <__swhatbuf_r+0x42>
 8004264:	466a      	mov	r2, sp
 8004266:	f000 f8c5 	bl	80043f4 <_fstat_r>
 800426a:	2800      	cmp	r0, #0
 800426c:	dbf1      	blt.n	8004252 <__swhatbuf_r+0x12>
 800426e:	9a01      	ldr	r2, [sp, #4]
 8004270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004278:	425a      	negs	r2, r3
 800427a:	415a      	adcs	r2, r3
 800427c:	602a      	str	r2, [r5, #0]
 800427e:	e7ee      	b.n	800425e <__swhatbuf_r+0x1e>
 8004280:	2340      	movs	r3, #64	; 0x40
 8004282:	2000      	movs	r0, #0
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	b016      	add	sp, #88	; 0x58
 8004288:	bd70      	pop	{r4, r5, r6, pc}
	...

0800428c <__smakebuf_r>:
 800428c:	898b      	ldrh	r3, [r1, #12]
 800428e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004290:	079d      	lsls	r5, r3, #30
 8004292:	4606      	mov	r6, r0
 8004294:	460c      	mov	r4, r1
 8004296:	d507      	bpl.n	80042a8 <__smakebuf_r+0x1c>
 8004298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	6123      	str	r3, [r4, #16]
 80042a0:	2301      	movs	r3, #1
 80042a2:	6163      	str	r3, [r4, #20]
 80042a4:	b002      	add	sp, #8
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	466a      	mov	r2, sp
 80042aa:	ab01      	add	r3, sp, #4
 80042ac:	f7ff ffc8 	bl	8004240 <__swhatbuf_r>
 80042b0:	9900      	ldr	r1, [sp, #0]
 80042b2:	4605      	mov	r5, r0
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff fa5b 	bl	8003770 <_malloc_r>
 80042ba:	b948      	cbnz	r0, 80042d0 <__smakebuf_r+0x44>
 80042bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c0:	059a      	lsls	r2, r3, #22
 80042c2:	d4ef      	bmi.n	80042a4 <__smakebuf_r+0x18>
 80042c4:	f023 0303 	bic.w	r3, r3, #3
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	e7e3      	b.n	8004298 <__smakebuf_r+0xc>
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <__smakebuf_r+0x7c>)
 80042d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	6020      	str	r0, [r4, #0]
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	9b00      	ldr	r3, [sp, #0]
 80042e0:	6120      	str	r0, [r4, #16]
 80042e2:	6163      	str	r3, [r4, #20]
 80042e4:	9b01      	ldr	r3, [sp, #4]
 80042e6:	b15b      	cbz	r3, 8004300 <__smakebuf_r+0x74>
 80042e8:	4630      	mov	r0, r6
 80042ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ee:	f000 f893 	bl	8004418 <_isatty_r>
 80042f2:	b128      	cbz	r0, 8004300 <__smakebuf_r+0x74>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	81a3      	strh	r3, [r4, #12]
 8004300:	89a0      	ldrh	r0, [r4, #12]
 8004302:	4305      	orrs	r5, r0
 8004304:	81a5      	strh	r5, [r4, #12]
 8004306:	e7cd      	b.n	80042a4 <__smakebuf_r+0x18>
 8004308:	08003589 	.word	0x08003589

0800430c <memchr>:
 800430c:	4603      	mov	r3, r0
 800430e:	b510      	push	{r4, lr}
 8004310:	b2c9      	uxtb	r1, r1
 8004312:	4402      	add	r2, r0
 8004314:	4293      	cmp	r3, r2
 8004316:	4618      	mov	r0, r3
 8004318:	d101      	bne.n	800431e <memchr+0x12>
 800431a:	2000      	movs	r0, #0
 800431c:	e003      	b.n	8004326 <memchr+0x1a>
 800431e:	7804      	ldrb	r4, [r0, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	428c      	cmp	r4, r1
 8004324:	d1f6      	bne.n	8004314 <memchr+0x8>
 8004326:	bd10      	pop	{r4, pc}

08004328 <__malloc_lock>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__malloc_lock+0x8>)
 800432a:	f7ff b9ff 	b.w	800372c <__retarget_lock_acquire_recursive>
 800432e:	bf00      	nop
 8004330:	200001b4 	.word	0x200001b4

08004334 <__malloc_unlock>:
 8004334:	4801      	ldr	r0, [pc, #4]	; (800433c <__malloc_unlock+0x8>)
 8004336:	f7ff b9fa 	b.w	800372e <__retarget_lock_release_recursive>
 800433a:	bf00      	nop
 800433c:	200001b4 	.word	0x200001b4

08004340 <_free_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	2900      	cmp	r1, #0
 8004346:	d040      	beq.n	80043ca <_free_r+0x8a>
 8004348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800434c:	1f0c      	subs	r4, r1, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfb8      	it	lt
 8004352:	18e4      	addlt	r4, r4, r3
 8004354:	f7ff ffe8 	bl	8004328 <__malloc_lock>
 8004358:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <_free_r+0x8c>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	b933      	cbnz	r3, 800436c <_free_r+0x2c>
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6014      	str	r4, [r2, #0]
 8004362:	4628      	mov	r0, r5
 8004364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004368:	f7ff bfe4 	b.w	8004334 <__malloc_unlock>
 800436c:	42a3      	cmp	r3, r4
 800436e:	d908      	bls.n	8004382 <_free_r+0x42>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	1821      	adds	r1, r4, r0
 8004374:	428b      	cmp	r3, r1
 8004376:	bf01      	itttt	eq
 8004378:	6819      	ldreq	r1, [r3, #0]
 800437a:	685b      	ldreq	r3, [r3, #4]
 800437c:	1809      	addeq	r1, r1, r0
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	e7ed      	b.n	800435e <_free_r+0x1e>
 8004382:	461a      	mov	r2, r3
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b10b      	cbz	r3, 800438c <_free_r+0x4c>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d9fa      	bls.n	8004382 <_free_r+0x42>
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	1850      	adds	r0, r2, r1
 8004390:	42a0      	cmp	r0, r4
 8004392:	d10b      	bne.n	80043ac <_free_r+0x6c>
 8004394:	6820      	ldr	r0, [r4, #0]
 8004396:	4401      	add	r1, r0
 8004398:	1850      	adds	r0, r2, r1
 800439a:	4283      	cmp	r3, r0
 800439c:	6011      	str	r1, [r2, #0]
 800439e:	d1e0      	bne.n	8004362 <_free_r+0x22>
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4401      	add	r1, r0
 80043a6:	6011      	str	r1, [r2, #0]
 80043a8:	6053      	str	r3, [r2, #4]
 80043aa:	e7da      	b.n	8004362 <_free_r+0x22>
 80043ac:	d902      	bls.n	80043b4 <_free_r+0x74>
 80043ae:	230c      	movs	r3, #12
 80043b0:	602b      	str	r3, [r5, #0]
 80043b2:	e7d6      	b.n	8004362 <_free_r+0x22>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	1821      	adds	r1, r4, r0
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf01      	itttt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	1809      	addeq	r1, r1, r0
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6054      	str	r4, [r2, #4]
 80043c8:	e7cb      	b.n	8004362 <_free_r+0x22>
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	200001b8 	.word	0x200001b8

080043d0 <_read_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	4d05      	ldr	r5, [pc, #20]	; (80043f0 <_read_r+0x20>)
 80043dc:	602a      	str	r2, [r5, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	f7fc f872 	bl	80004c8 <_read>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d102      	bne.n	80043ee <_read_r+0x1e>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	b103      	cbz	r3, 80043ee <_read_r+0x1e>
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	200001c0 	.word	0x200001c0

080043f4 <_fstat_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	2300      	movs	r3, #0
 80043f8:	4d06      	ldr	r5, [pc, #24]	; (8004414 <_fstat_r+0x20>)
 80043fa:	4604      	mov	r4, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	602b      	str	r3, [r5, #0]
 8004402:	f7fc f8a5 	bl	8000550 <_fstat>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	d102      	bne.n	8004410 <_fstat_r+0x1c>
 800440a:	682b      	ldr	r3, [r5, #0]
 800440c:	b103      	cbz	r3, 8004410 <_fstat_r+0x1c>
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	bf00      	nop
 8004414:	200001c0 	.word	0x200001c0

08004418 <_isatty_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	2300      	movs	r3, #0
 800441c:	4d05      	ldr	r5, [pc, #20]	; (8004434 <_isatty_r+0x1c>)
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	f7fc f8a3 	bl	800056e <_isatty>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_isatty_r+0x1a>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_isatty_r+0x1a>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	200001c0 	.word	0x200001c0

08004438 <_init>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr

08004444 <_fini>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	bf00      	nop
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr
